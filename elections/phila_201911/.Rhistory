print(folder)
print("#########################################")
print("CALCULATING PARAMS")
source("fit_submissions.R", chdir=TRUE)
source("precalc_params.R", chdir=TRUE)
USE_GOOGLE_DATA <- TRUE
test_elections <- tribble(
~folder, ~turnout,
"phila_201911", 306e3,
"phila_201905", 243e3,
"phila_201811", 320e3,
"phila_201805", 320e3
)
set.seed(215)
folder <- test_elections$folder[i]
true_turnout <- test_elections$turnout[i]
print("#########################################")
print(folder)
print("#########################################")
folder <- test_elections$folder[i]
true_turnout <- test_elections$turnout[i]
print("#########################################")
print(folder)
print("#########################################")
source(sprintf("%s/config.R", folder))
print("CALCULATING PARAMS")
df <- read_csv(config$turnout_df_path, col_types = "ccd")
setwd(folder)
print("#########################################")
print(folder)
print("#########################################")
source(sprintf("%s/config.R", folder))
source("config.R")
print("CALCULATING PARAMS")
df <- read_csv(config$turnout_df_path, col_types = "ccd")
precincts <- readRDS("data/precincts.Rds")
list.files("data")
if(file.exists("data/precincts.Rds")){
precincts <- readRDS("data/precincts.Rds")
wards <- readRDS("data/wards.Rds")
} else {
precincts <- safe_load("data/precincts.Rda")
wards <- safe_load("data/wards.Rda")
}
params <- calc_params(
turnout_df=df,
n_svd=3
)
print("FITTING DATA")
google_rds <- sprintf("%s/outputs/google_download.Rds", folder)
data_load <- load_data(USE_GOOGLE_DATA, config, params, google_rds)
google_rds <- "outputs/google_download.Rds"
data_load <- load_data(USE_GOOGLE_DATA, config, params, google_rds)
list.files(outputs)
list.files("outputs")
precincts <- safe_load("data/precincts.Rda")
saveRDS(precincts, file="data/precincts.Rds")
if(file.exists("data/precincts.Rds")){
precincts <- readRDS("data/precincts.Rds")
wards <- readRDS("data/wards.Rds")
} else {
precincts <- safe_load("data/precincts.Rda")
wards <- safe_load("data/wards.Rda")
google_download <- safe_load("outputs/google_download.Rda")
saveRDS(precincts, file="data/precincts.Rds")
saveRDS(wards, file="data/wards.Rds")
saveRDS(google_download, file="outputs/google_download.Rds")
}
precincts <- safe_load("data/precincts.Rda")
wards <- safe_load("data/wards.Rda")
google_download <- safe_load("outputs/google_download.Rda")
saveRDS(precincts, file="data/precincts.Rds")
saveRDS(wards, file="data/wards.Rds")
saveRDS(google_download, file="outputs/google_download.Rds")
precincts <- readRDS("data/precincts.Rds")
wards <- readRDS("data/wards.Rds")
params <- calc_params(
turnout_df=df,
n_svd=3
)
diagnostics(params, precincts, config)
print("FITTING DATA")
google_rds <- "outputs/google_download.Rds"
data_load <- load_data(USE_GOOGLE_DATA, config, params, google_rds)
google_rds
folder
election_config <- config
validate_config(election_config)
fake_data <- NULL
raw_data <- load_google_data(election_config, google_rds)
raw_data
raw_data %>% filter(is.na(as.numeric(obs)))
raw_data$obs <- asnum(raw_data$obs)
load_google_data <- function(
election_config,
rds="outputs/google_download.Rds"
){
validate_config(election_config)
config <- extend_config(election_config)
raw_data <- readRDS(rds)
raw_data$obs <- asnum(raw_data$obs)
raw_data <- raw_data %>% filter(
!is.na(obs) &
!is.na(time) &
!is.na(precinct)
)
# filter obviously unreasonable raw_data
raw_data$obs[raw_data$obs == 0] <- 1
raw_data <- raw_data %>% filter(obs > 0 & obs <= 900)
raw_data <- raw_data %>% filter(
(time >= config$base_time) &
(time <= (config$base_time + hours(config$end_hour - config$start_hour)))
)
return(raw_data)
}
data_load <- load_data(USE_GOOGLE_DATA, config, params, google_rds)
data_load
raw_data <- data_load$raw_data
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=TRUE
)
expect_gt(ci$turnout_975, true_turnout)
ci <- bs$bootstrap_ci %>% tail(1)
ci
expect_gt(ci$turnout_975, true_turnout)
expect_lt(ci$turnout_025, true_turnout)
i <- 3
folder <- test_elections$folder[i]
true_turnout <- test_elections$turnout[i]
folder
setwd(folder)
setwd("..")
setwd(folder)
print("#########################################")
print(folder)
print("#########################################")
source("config.R")
print("CALCULATING PARAMS")
turnout_df <- read_csv(config$turnout_df_path, col_types = "ccd")
if(!file.exists("data/precincts.Rds")){
precincts <- safe_load("data/precincts.Rda")
wards <- safe_load("data/wards.Rda")
google_download <- safe_load("outputs/google_download.Rda")
saveRDS(precincts, file="data/precincts.Rds")
saveRDS(wards, file="data/wards.Rds")
saveRDS(google_download, file="outputs/google_download.Rds")
}
precincts <- readRDS("data/precincts.Rds")
wards <- readRDS("data/wards.Rds")
params <- calc_params(
turnout_df=turnout_df,
n_svd=3
)
head(turnout_df)
config$turnout_df_path
turnout_df <- read_csv(config$turnout_df_path, col_types = "ccd")
if(!file.exists("data/precincts.Rds")){
precincts <- safe_load("data/precincts.Rda")
wards <- safe_load("data/wards.Rda")
google_download <- safe_load("outputs/google_download.Rda")
saveRDS(precincts, file="data/precincts.Rds")
saveRDS(wards, file="data/wards.Rds")
saveRDS(google_download, file="outputs/google_download.Rds")
}
precincts <- readRDS("data/precincts.Rds")
wards <- readRDS("data/wards.Rds")
params <- calc_params(
turnout_df=turnout_df,
n_svd=3
)
print("FITTING DATA")
google_rds <- "outputs/google_download.Rds"
data_load <- load_data(USE_GOOGLE_DATA, config, params, google_rds)
raw_data <- data_load$raw_data
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=TRUE
)
ci <- bs$bootstrap_ci %>% tail(1)
ci
expect_gt(ci$turnout_975, true_turnout)
expect_lt(ci$turnout_025, true_turnout)
expect_lt(ci$turnout_025, eval(bquote(true_turnout)))
print(sprintf("Boostrapped CIs: %s", ci))
print(sprintf("Boostrapped CIs: %s", paste(round(ci)))
print(sprintf("True Turnout: %s", true_turnout))
expect_gt(ci$turnout_975, true_turnout)
expect_lt(ci$turnout_025, true_turnout)
setwd("..")
}
print(sprintf("Boostrapped CIs: %s", paste(round(ci))))
ci
print(sprintf("Boostrapped CIs: %s", paste(round(ci[c("turnout_025", "turnout_975")]))))
print(round(ci[c("turnout_025", "turnout_975")]))))
print(round(ci[c("turnout_025", "turnout_975")])))
print(round(ci[c("turnout_025", "turnout_975")]))
print("Boostrapped CIs")
print(round(ci[c("turnout_025", "turnout_975")]))
print(sprintf("True Turnout: %s", true_turnout))
expect_gt(ci$turnout_975, true_turnout)
expect_lt(ci$turnout_025, true_turnout)
test_elections <- tribble(
~folder, ~turnout,
"phila_201911", 306e3,
"phila_201905", 243e3,
"phila_201811", 553e3,
"phila_201805", 155e3
)
i <- 4
set.seed(215)
folder <- test_elections$folder[i]
true_turnout <- test_elections$turnout[i]
setwd(folder)
print("#########################################")
print(folder)
print("#########################################")
source("config.R")
print("CALCULATING PARAMS")
turnout_df <- read_csv(config$turnout_df_path, col_types = "ccd")
load("../../div_turnout.Rda")
head(div_turnout)
div_turnout %>% group_by(year) %>% summarise(sum(turnout))
turnout_df <- read_csv(config$turnout_df_path, col_types = "ccd")
config$turnout_df_path
getwd()
if(!file.exists("data/precincts.Rds")){
precincts <- safe_load("data/precincts.Rda")
wards <- safe_load("data/wards.Rda")
google_download <- safe_load("outputs/google_download.Rda")
saveRDS(precincts, file="data/precincts.Rds")
saveRDS(wards, file="data/wards.Rds")
saveRDS(google_download, file="outputs/google_download.Rds")
}
if(!file.exists("data/precincts.Rds")){
precincts <- safe_load("data/precincts.Rda")
wards <- safe_load("data/wards.Rda")
google_download <- safe_load("outputs/google_download.Rda")
saveRDS(precincts, file="data/precincts.Rds")
saveRDS(wards, file="data/wards.Rds")
saveRDS(google_download, file="outputs/google_download.Rds")
}
precincts <- readRDS("data/precincts.Rds")
wards <- readRDS("data/wards.Rds")
params <- calc_params(
turnout_df=turnout_df,
n_svd=3
)
print("FITTING DATA")
google_rds <- "outputs/google_download.Rds"
data_load <- load_data(USE_GOOGLE_DATA, config, params, google_rds)
load("../../google_download.Rda")
head(google_download)
google_download <- safe_load("../../google_download.Rda")
head(google_download)
google_download %<>%
rename()
google_download %<>% rename(timestamp=time, ward=WARD16, div=DIV16) %>% mutate(precinct = paste0(ward, div))
head(google_download)
google_download %<>% mutate(time=timestamp)
saveRDS(google_download, file="outputs/google_download.Rds")
google_rds <- "outputs/google_download.Rds"
data_load <- load_data(USE_GOOGLE_DATA, config, params, google_rds)
raw_data <- data_load$raw_data
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=TRUE
)
test_elections <- tribble(
~folder, ~turnout,
"phila_201911", 306e3,
"phila_201905", 243e3,
"phila_201811", 553e3,
"phila_201805", 170e3
)
folder <- test_elections$folder[i]
true_turnout <- test_elections$turnout[i]
ci <- bs$bootstrap_ci %>% tail(1)
print("Boostrapped CIs")
print(round(ci[c("turnout_025", "turnout_975")]))
print(sprintf("True Turnout: %s", true_turnout))
expect_gt(ci$turnout_975, true_turnout)
expect_lt(ci$turnout_025, true_turnout)
library(testthat)
test_files <- list.files(pattern = "^test_")
for(file in test_files){
source(file)
}
test_files
test_files <- list.files(
pattern = "^test_",
path = "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/tests/"
)
test_files
for(file in test_files){
source(file)
}
test_files <- list.files(
pattern = "^test_",
path = test_folder,
full.names = TRUE
)
test_folder <- "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/tests/"
test_files <- list.files(
pattern = "^test_",
path = test_folder,
full.names = TRUE
)
test_files
for(file in test_files){
source(file)
}
library(testthat)
test_folder <- "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/tests/"
test_files <- list.files(
pattern = "^test_",
path = test_folder,
full.names = TRUE
)
library(svdcov)
library(testthat)
library(svdcov)
devtools::load_all("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/svdcov/")
library(tidyverse)
devtools::load_all("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/svdcov/")
get_turnout_svd <- function(result_df, election_type, party_grep=NULL, verbose=TRUE, use_log=USE_LOG){
if(!is.null(party_grep)) result_df <- result_df %>% filter(grepl(party_grep, party))
result_df <- result_df %>% filter(grepl(paste0(election_type, "$"), election))
turnout <- result_df %>%
filter(is_primary_office) %>%
group_by(warddiv, election) %>%
summarise(votes = sum(votes)) %>%
group_by() %>%
mutate(target = {if(use_log) log(votes + 1) else votes})
turnout_wide <- turnout %>%
select(warddiv, election, target) %>%
spread(election, target, fill = 0)
turnout_wide_mat <- as.matrix(turnout_wide %>% select(-warddiv))
row.names(turnout_wide_mat) <- turnout_wide$warddiv
svd <- get_svd(turnout_wide_mat, verbose=TRUE, method=SVD_METHOD)
svd@log <- use_log
return(svd)
}
get_pvote_svd <- function(
df_past,
primary_party_regex="^DEM",
use_primary=TRUE,
use_general=TRUE,
use_log=USE_LOG
){
df_pvote <- df_past %>%
filter(candidate != "Write In") %>%
filter(election == "general" | use_primary) %>%
filter(election == "primary" | use_general) %>%
filter(grepl(primary_party_regex, party, ignore.case=TRUE) | election=="general")
df_pvote <- df_pvote %>%
group_by(election, office, district, warddiv) %>%
mutate(pvote = votes / sum(votes)) %>%
mutate(target = {if(use_log) log(pvote + 0.001) else pvote}) %>%
group_by()
n_cand <- df_pvote %>%
select(election, office, district, candidate) %>%
unique() %>%
group_by(election, office, district) %>%
summarise(n_cand = n()) %>%
mutate(
prior_mean = {if(use_log) log(1/n_cand) else 1/n_cand}
) %>%
ungroup()
df_pvote <- df_pvote %>%
left_join(n_cand) %>%
mutate(target_demean = target - prior_mean)
pvote_wide <- df_pvote %>%
mutate(office=paste0(office, ifelse(is.na(district), "", district))) %>%
unite("key", candidate, office, election) %>%
select(warddiv, key, target_demean) %>%
spread(key, target_demean, fill=0)
pvote_mat <- as.matrix(pvote_wide %>% select(-warddiv))
rownames(pvote_mat) <- pvote_wide$warddiv
svd <- get_svd(
pvote_mat,
n_svd=5,
known_column_means=0,
verbose=TRUE,
method=SVD_METHOD
)
svd@log <- use_log
return(svd)
}
map_precinct_score <- function(svd, col, precinct_sf, adj_area=TRUE){
if(!is(svd, "SVDParams")) stop("params must be of class SVDParams")
precinct_sf$area <- as.numeric(st_area(precinct_sf))
if(adj_area){
if(svd@log){
adj_fe <- function(fe, area) fe - log(area)
} else {
adj_fe <- function(fe, area) fe / area
}
} else {
adj_fe <- function(x, ...) x
}
ggplot(
precinct_sf %>%
left_join(svd@row_scores, by=c("warddiv"="row"))
) +
geom_sf(
aes(fill = adj_fe(!!sym(col), area)),
color= NA
) +
scale_fill_viridis_c("Score")+
theme_map_sixtysix()
}
map_precinct_fe <- function(svd, precinct_sf, adj_area) {
map_precinct_score(svd, "mean", precinct_sf, adj_area) +
scale_fill_viridis_c("Mean")
}
map_precinct_dim <- function(svd, k, precinct_sf){
map_precinct_score(svd, paste0("score.",k), precinct_sf, adj_area=FALSE) +
scale_fill_gradient2(
paste("Score, Dimension", k),
midpoint = 0
)
}
plot_election_score <- function(svd, col){
if(!is(svd, "SVDParams")) stop("svd must be of class SVDParams")
election_df <- svd@col_scores %>%
mutate(
year = asnum(substr(col, 1, 4)),
etype = substr(col, 6, nchar(as.character(col)))
)
ggplot(
election_df,
aes(x=year, y=!!sym(col))
) +
geom_line(
aes(group=year %% 4),
color= strong_green
) +
geom_point(
color = strong_green,
size = 2
) +
facet_grid(etype ~ .) +
xlab("") +
theme_sixtysix() +
ggtitle("election scores", "Grouped by 4 election cycle")
}
plot_election_fe <- function(svd) plot_election_score(svd, "mean")
plot_election_dim <- function(svd, k) plot_election_score(svd, paste0("score.", k))
pause <- function() invisible(readline(prompt = "Press <Enter> to continue..."))
pvote_diagnostics <- function(svd, precinct_sf){
print(
map_precinct_fe(svd, precinct_sf, adj_area=FALSE) +
ggtitle("Precinct means of pvote")
)
pause()
for(k in 1:(ncol(svd@row_scores)-2)){
print(
map_precinct_dim(pvote_svd, k, precinct_sf) +
ggtitle(sprintf("pvote Dimension %s", k))
)
pause()
}
}
turnout_diagnostics <- function(svd, precinct_sf, name=""){
print(
map_precinct_fe(svd, precinct_sf, adj_area=FALSE) +
ggtitle(sprintf("Precinct means of turnout %s", name))
)
pause()
print(
plot_election_fe(svd) +
ggtitle(sprintf("Turnout %s FE", name))
)
pause()
for(k in 1:(ncol(svd@row_scores)-2)){
print(
map_precinct_dim(svd, k, precinct_sf) +
ggtitle(sprintf("Dim %s, %s", k, name))
)
pause()
print(
plot_election_dim(svd, k) +
ggtitle(sprintf("Turnout %s Dimension %s", name, k))
)
pause()
}
}
diagnostics <- function(needle_params, precinct_sf, config){
print("Plotting Diagnostics...")
pvote_diagnostics(needle_params@pvote_svd, precinct_sf)
for(turnout_svd_name in names(needle_params@turnout_svds)){
turnout_svd <- needle_params@turnout_svds[[turnout_svd_name]]
turnout_diagnostics(turnout_svd, precinct_sf, turnout_svd_name)
}
}
pvote_svd <- get_pvote_svd(df_past)
for(file in test_files){
source(file)
}
