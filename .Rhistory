pct_of_black = pop_nh_black / sum(pop_nh_black),
pct_black_of_tract = pop_nh_black / pop
)
tract_df <- as.data.frame(tracts) %>% select(GEOID, pop, pop_nh_white, pop_nh_black) %>% filter(pop>0)
tract_df %>%
mutate(
pct_of_black = pop_nh_black / sum(pop_nh_black),
pct_black_of_tract = pop_nh_black / pop
) %>%
summarise(
sum(pct_of_black * pct_black_of_tract)
)
head(tract_df)
tract_df %>%
mutate(
pct_of_black = pop_nh_black / sum(pop_nh_black),
pct_black_of_tract = pop_nh_black / pop
) %>%
summarise(
isolation = sum(pct_of_black * pct_black_of_tract)
)
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_2020/R")
library(dplyr)
library(magrittr)
library(tidyr)
library(scales)
library(ggplot2)
source("../../../admin_scripts/util.R") # format_name
df <- readRDS("../tmp/tmp_results.RDS")
mail_sos <- read.csv("../data/mail_counties_sos.csv")
df <- df %>%
left_join(mail_sos %>% rename(mail_sos = mail_returned)) %>%
mutate(
pct_inc = mail_sos / mailin_ret,
mailin_ret = pct_inc * mailin_ret,
mailin_ret_D = pct_inc * mailin_ret_D,
mailin_ret_R = pct_inc * mailin_ret_R,
mailin_ret_O = pct_inc * mailin_ret_O,
mailin_outstanding = mailin_sent - mailin_ret,
mailin_outstanding_D = mailin_sent_D - mailin_ret_D,
mailin_outstanding_R = mailin_sent_R - mailin_ret_R,
mailin_outstanding_O = mailin_sent_O - mailin_ret_O
) %>% select(-mail_sos, -pct_inc)
# TEST <- TRUE
if(df %>% filter(votes_total > 0) %>% with(any(is.na(votes_Trump)))){
stop("NA Values for pct_Trump")
}
df %<>%
mutate(
change = (
(votes_Biden - votes_Trump)/votes_total - (res16_D - res16_R)/turnout_16
)
) %>%
ungroup()
change_16_20 <- df %>%
filter(!is.na(change)) %>%
with(100*weighted.mean(change, w=turnout_16))
multiplier_2016 <- 0.0
finished_counties <- c()
df %<>%
mutate(
left_total = ifelse(
county %in% finished_counties,
0,
pmax(multiplier_2016 * turnout_16 - mailin_ret - inperson_total, 0)
),
left_Biden = left_total * res16_D / (res16_D + res16_R),
left_Trump = left_total * res16_R / (res16_D + res16_R)
)
library(sf)
library(leaflet)
counties <- st_read("../../../data/gis/census/tigris_counties_2015.shp") %>%
st_transform(4326)
counties %<>%
left_join(df %>% mutate(county=format_name(county)), by=c("NAME"="county"))
counties %<>%
mutate(
popup=sprintf(
paste(
c(
"<b>%s County</b>",
"Total Votes Counted: %s",
# "%s / %s Precincts Reporting",
"Biden: %s (%0.1f%%)",
"Trump: %s (%0.1f%%)",
"Diff: %s",
"2016: %s",
"2016 Turnout: %s",
"",
"Mail-Ins Counted: %s",
"Mail-Ins Returned: %s",
"Biden among Mail-Ins: %s (%0.1f%%)",
"Trump among Mail-Ins: %s (%0.1f%%)",
"Other among Mail-Ins: %s (%0.1f%%)",
"",
"Outstanding Mail-Ins: %s",
"Registered Dem: %s (%0.1f%%)",
"Registered Rep: %s (%0.1f%%)",
"Registered Other: %s (%0.1f%%)"
),
collapse = "<br>"
),
NAME,
comma(votes_total),
# comma(precinct_num), comma(precinct_den),
comma(votes_Biden), 100*votes_Biden / votes_total,
comma(votes_Trump), 100*votes_Trump / votes_total,
sprintf(
"+%0.1f%% %s",
100*abs(votes_Biden - votes_Trump)/ votes_total,
ifelse(votes_Biden > votes_Trump, "Biden", "Trump")
),
sprintf(
"+%0.1f%% %s",
100*abs(res16_D - res16_R)/turnout_16,
ifelse(res16_D > res16_R, "Clinton", "Trump")
),
comma(turnout_16),
comma(mail_total),
comma(mailin_ret),
comma(mail_Biden), 100*mail_Biden/mail_total,
comma(mail_Trump), 100*mail_Trump/mail_total,
comma(mail_Other), 100*mail_Other/mail_total,
comma(mailin_outstanding),
comma(mailin_outstanding_D), 100*mailin_outstanding_D/mailin_outstanding,
comma(mailin_outstanding_R), 100*mailin_outstanding_R/mailin_outstanding,
comma(mailin_outstanding_O), 100*mailin_outstanding_O/mailin_outstanding
)
)
assertthat::are_equal(nrow(counties), 67)
assertthat::assert_that(all(!is.na(counties$votes_total)))
make_leaflet <- function(
data,
get_color,
title,
is_percent=FALSE,
is_race=FALSE #if is_race, color should be % Dem - % Rep
){
color <- get_color(data)
vals <- cut_vals(color, is_race)
legend_list <- create_legend(
vals$min,
vals$max,
vals$step_size,
vals$pal,
is_percent,
is_race
)
init_map(data, 6) %>%
addPolygons(
data=data$geometry,
weight=0,
color="white",
opacity=1,
fillOpacity = 0.8,
smoothFactor = 0,
fillColor = vals$pal(color),
popup=counties$popup
) %>%
addControl(title, position="topright", layerId="map_title") %>%
addLegend(
layerId="geom_legend",
position="bottomright",
colors=legend_list$colors,
labels=legend_list$labels
)
}
init_map <- function(data, zoom){
bbox <- st_bbox(data)
leaflet(
options=leafletOptions(
minZoom=zoom,
# maxZoom=zoom,
zoomControl=TRUE,
dragging=TRUE
)
)%>%
setView(
zoom=zoom,
lng=mean(bbox[c(1,3)]),
lat=mean(bbox[c(2,4)])
) %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
setMaxBounds(
lng1=bbox["xmin"],
lng2=bbox["xmax"],
lat1=bbox["ymin"],
lat2=bbox["ymax"]
)
}
create_legend <- function(
min_value,
max_value,
step_size,
pal,
is_percent,
is_race
){
legend_values <- seq(min_value, max_value, step_size)
legend_colors <- pal(legend_values)
if(is_race){
legend_labels <- sprintf(
"+%s%% %s",
abs(legend_values),
case_when(
legend_values==0 ~ "",
legend_values > 0 ~ "Dem",
legend_values < 0 ~ "Rep"
)
)
}else if(is_percent){
legend_labels <- sprintf("%s%%", legend_values)
} else{
legend_labels <- scales::comma(legend_values)
}
list(
colors=legend_colors,
values=legend_values,
labels=legend_labels
)
}
cut_vals <- function(x, is_race){
min_value <- min(x, na.rm=TRUE)
max_value <- max(x, na.rm=TRUE)
if(is_race) {
max_value <- max(abs(min_value), abs(max_value))
min_value <- -max_value
}
sigfig <- round(log10(max_value-min_value)) - 1
step_size <- 2 * 10^(sigfig)
min_value <- step_size * floor(min_value / step_size)
max_value <- step_size * ceiling(max_value / step_size)
if(!is_race){
pal <- colorNumeric(
"viridis",
domain=c(min_value, max_value)
)
} else {
pal <- colorNumeric(
c(strong_red, "grey95", strong_blue),
domain=c(min_value, max_value)
)
}
list(
min=min_value,
max=max_value,
step_size=step_size,
pal=pal
)
}
make_leaflet_circles <- function(
data,
get_color,
get_radius,
title,
is_percent=FALSE,
is_race=FALSE, #if is_race, should be % Dem - % Rep
zoom=6
){
radius <- get_radius(data)
max_radius <- 20
radius <- max_radius * radius / max(radius)
data <- data[order(radius, decreasing=TRUE),]
radius <- radius[order(radius, decreasing=TRUE)]
color <- get_color(data)
vals <- cut_vals(color, is_race)
legend_list <- create_legend(
vals$min,
vals$max,
vals$step_size,
vals$pal,
is_percent,
is_race
)
init_map(data, zoom) %>%
addCircleMarkers(
lat=asnum(data$INTPTLAT),
lng=asnum(data$INTPTLON),
radius=radius,
# weight=0,
stroke=FALSE,
color=vals$pal(color),
opacity=1,
fillOpacity = 1,
# smoothFactor = 0,
fillColor = vals$pal(color),
popup=data$popup
) %>%
addControl(title, position="topright", layerId="map_title") %>%
addLegend(
layerId="geom_legend",
position="bottomright",
colors=legend_list$colors,
labels=legend_list$labels
)
}
pretty_time <- function(time){
gsub("^0", "", format(time, "%I:%M %p"))
}
format_num <- function(x){
digits <- nchar(as.character(round(x)))
if(digits > 6){
round <- 6
suffix <- "M"
} else if (digits > 3){
round <- 3
suffix <- "K"
} else {
round <- 0
suffix <- ""
}
if(digits == round+1){
text <- round(x / 10^(round-1))/10
} else {
text <- round(x / (10^round))
}
return(paste0(text, suffix))
}
gen_summ <- function(df){
calc_mail_result <- function(
total_returns, total_counted_mail, counted_mail_candidate, mailin_ret_party
){
pct_cand <- counted_mail_candidate / total_counted_mail
uncounted_mail <- pmax(total_returns - total_counted_mail, 0)
pct_counted <- pmin(total_counted_mail / total_returns, 1)
ifelse(
total_counted_mail < 1000,
(1-pct_counted) * mailin_ret_party,
uncounted_mail * pct_cand
)
}
calc_mail_result <- function(
total_returns, total_counted_mail, counted_mail_candidate, mailin_ret_party
){
pct_cand <- counted_mail_candidate / total_counted_mail
uncounted_mail <- pmax(total_returns - total_counted_mail, 0)
pct_counted <- pmin(total_counted_mail / total_returns, 1)
ifelse(
total_counted_mail < 1000,
(1-pct_counted) * mailin_ret_party,
uncounted_mail * pct_cand
)
}
res <- list(
total_prec=sum(df$precinct_den),
reporting_prec=sum(df$precinct_num),
live_turnout=sum(df$votes_total),
live_biden=sum(df$votes_Biden),
live_trump=sum(df$votes_Trump),
live_other=sum(df$votes_Other),
ret_total=sum(pmax(df$mailin_ret - df$mail_total, 0)),
ret_dem = sum(calc_mail_result(df$mailin_ret, df$mail_total, df$mail_Biden, df$mailin_ret_D)),
ret_rep = sum(calc_mail_result(df$mailin_ret, df$mail_total, df$mail_Trump, df$mailin_ret_R)),
ret_oth = sum(calc_mail_result(df$mailin_ret, df$mail_total, df$mail_Other, df$mailin_ret_O)),
outst_total=sum(df$mailin_outstanding),
outst_dem=sum(df$mailin_outstanding_D),
outst_rep=sum(df$mailin_outstanding_R),
outst_oth=sum(df$mailin_outstanding_O),
left_Trump=sum(df$left_Trump),
left_Biden=sum(df$left_Biden),
turnout_16=sum(df$turnout_16)
)
return(res)
}
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/")
library(dplyr)
library(stargazer)
source(add_election_path("config.R"), chdir=TRUE)
source("R/util.R", chdir=TRUE)
source("R/generate_plots.R", chdir=TRUE)
source("R/bootstrap.R", chdir=TRUE)
wards <- readRDS(add_election_path("data/wards.Rds"))
wards <- wards %>% left_join(ward_turnout)
wards <- readRDS(add_election_path("data/wards.Rds"))
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/")
source(add_election_path("config.R"), chdir=TRUE)
wards <- readRDS("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_2020/data/wards.Rds")
wards <- readRDS("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/election_configs/phila_202011/data/wards.Rds")
wards <- wards %>% left_join(ward_turnout)
ward_turnout <- read.csv("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_2020/data/wards_1106_727.csv")
ward_turnout
ward_turnout %<>%
mutate(
ward=sprintf("%02d", ward_turnout[,1])
)
ward_turnout
ward_turnout %<>%
mutate(
ward=sprintf("%02d", ward_turnout[,1])
) %>%
rename(turnout=Votes.Cast)
wards <- wards %>% left_join(ward_turnout)
head(ward_turnout)
wards <- readRDS("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/election_configs/phila_202011/data/wards.Rds")
ward_turnout <- read.csv("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_2020/data/wards_1106_727.csv")
ward_turnout %<>%
mutate(
ward=sprintf("%02d", ward_turnout[,1])
) %>%
rename(turnout=Votes.Cast)
wards <- wards %>% left_join(ward_turnout %>% select(ward, turnout))
df_major <- readRDS("../../../data/processed_data/df_major_20200813.Rds")
head(df_major)
pres16 <- df_major %>% filter(year==2016, election_type=="general", is_topline_office)
pres16
turnout_16
turnout_16 <- pres16 %>%
mutate(ward=substr(warddiv, 1, 2)) %>%
group_by(votes) %>%
summarise(turnout_16=sum(votes))
turnout_16
turnout_16 <- pres16 %>%
mutate(ward=substr(warddiv, 1, 2)) %>%
group_by(ward) %>%
summarise(turnout_16=sum(votes))
turnout_16
wards %>%
left_join(turnout_16) %>%
left_join(pres16) %>%
left_join(mail_in) %>%
ggplot(
aes(x=100*pdem, y=(returned + turnout)/turnout_16)
) + geom_point(
aes(size=turnout_16)
) +
geom_smooth(method=lm, aes(weight=turnout_16)) +
theme_sixtysix() +
labs(x="Clinton % in 2016", y="Current prop of 2016 turnout (mail + in-person)")
head(wards)
ward_turnout %<>%
mutate(
ward=sprintf("%02d", ward_turnout[,1])
) %>%
rename(inperson=PollingPlace)
ward_turnout <- read.csv("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_night_2020/data/wards_1106_727.csv")
ward_turnout %<>%
mutate(
ward=sprintf("%02d", ward_turnout[,1])
) %>%
rename(inperson=PollingPlace)
wards <- wards %>% left_join(ward_turnout %>% select(ward, turnout))
wards <- wards %>% left_join(ward_turnout %>% select(ward, inperson))
mail_in <- readRDS("../../election_night_2020/tmp/mailin_phila.csv")
mail_in <- read.csv("../../election_night_2020/tmp/mailin_phila.csv")
mail_in
mail_in <- read.csv("../../election_night_2020/tmp/mailin_phila.csv") %>%
mutate(ward=substr(warddiv,1,2)) %>%
group_by(ward) %>%
summarise(returned=sum(n_ret), turnout_16=sum(turnout_16))
mail_in
head(wards)
wards %>%
left_join(mail_in) %>%
ggplot() +
geom_sf(aes(fill=(inperson + returned) / turnout_16))
wards %>%
left_join(mail_in) %>%
ggplot() +
geom_sf(aes(fill=(inperson + returned) / turnout_16)) +
scale_fill_viridis_c() +
theme_map_sixtysix()
wards %>%
left_join(mail_in) %>%
ggplot() +
geom_sf(aes(fill=(inperson + returned) / turnout_16)) +
scale_fill_viridis_c("Prop. of 2016") +
theme_map_sixtysix()
wards %>%
left_join(mail_in) %>%
ggplot() +
geom_sf(aes(fill=(inperson + returned) / turnout_16)) +
scale_fill_viridis_c("Prop. of 2016") +
theme_map_sixtysix() +
labs(
title="Turnout (Current in-person + all returned mail)"
)
wards %>%
left_join(mail_in) %>%
ggplot() +
geom_sf(aes(fill=(inperson + returned) / turnout_16)) +
scale_fill_viridis_c("Prop. of 2016") +
theme_map_sixtysix() +
labs(
title="Turnout",subtitle= "Current in-person + all returned mail"
)
getwd()
ggsave("C:/Users/Jonathan Tannen/Desktop/turnout_prop.png")
wards
wards %>% filter(ward %in% c(27, 24, 20))
wards %>% left_join(mail_in) %>% filter(ward %in% c(27, 24, 20))
wards %>% left_join(mail_in) %>% filter(ward %in% c(27, 24, 20)) %>%
mutate(diff = inperson + returned - turnout_16)
wards %>% left_join(mail_in) %>% filter(ward %in% c(27, 24, 20)) %>%
mutate(diff = inperson + returned - turnout_16) %>%
summarise_at(vars(turnout, inperson, returned, turnout_16, diff))
wards %>% left_join(mail_in) %>% filter(ward %in% c(27, 24, 20)) %>%
mutate(diff = inperson + returned - turnout_16) %>%
summarise_at(vars(turnout, inperson, returned, turnout_16, diff), .funs=sum)
4608 / 23614
wards %>% left_join(mail_in) %>% filter(ward %in% c(18, 31)) %>%
mutate(diff = inperson + returned - turnout_16) %>%
summarise_at(vars(turnout, inperson, returned, turnout_16, diff), .funs=sum)
2907 / 16269
(0.179 + 0.195) * 23614
20000 / 710000
wards %>% left_join(mail_in) %>% filter(ward %in% c(46)) %>%
mutate(diff = inperson + returned - turnout_16) %>%
summarise_at(vars(turnout, inperson, returned, turnout_16, diff), .funs=sum)
0.18 * 11282
wards %>% left_join(mail_in) %>% filter(ward %in% c(21)) %>%
mutate(diff = inperson + returned - turnout_16) %>%
summarise_at(vars(turnout, inperson, returned, turnout_16, diff), .funs=sum)
