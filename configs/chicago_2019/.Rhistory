needed_vintage
needed_crosswalk <- paste(vintage, needed_vintage, sep=',)
}
}
needed_crosswalk <- paste(vintage, needed_vintage, sep=',')
year <- 2010
vintage <- year_to_geo_vintage$vintage[year_to_geo_vintage$year == year]
needed_vintage <- year_to_geo_vintage$vintage[year_to_geo_vintage$year == year+2]
needed_crosswalk <- paste(vintage, needed_vintage, sep=',')
needed_crosswalk
cw <- crosswalks[[needed_crosswalk]]
cw
sth_uspgov_results
sth_uspgov_results %>% left_join(cw)
head(sth_uspgov_results)
head(cw)
sth_uspgov_results %>%
left_join(cw, by = c("GEOID" = "xid"))
hist(cw$frac_of_y)
hist(cw$frac_of_x)
ggplot2::qplot(cw, aes(x=frac_of_x))
ggplot2::qplot(cw, aes(x=frac_of_x), geom="hist")
ggplot2::qplot(cw, aes(x=frac_of_x), geom="histogram")
sth_uspgov_results %>%
left_join(cw, by = c("GEOID" = "xid")) %>%
group_by(yid)
sth_uspgov_results %>%
left_join(cw, by = c("GEOID" = "xid")) %>%
group_by(yid) %>%
summarise(
sth_pctdem_lagged = weighted.mean(sth_pctdem, w = frac_of_y),
uspgov_pctdem_lagged = weighted.mean(uspgov_pctdem, w = frac_of_y),
sth_frac_contested_lagged = weighted.mean(sth_is_uncontested == "contested", w = frac_of_y)
)
head(geographies)
geographies[1,]
cw%>% filter(frac_of_y == 0)
sth_uspgov_results %>%
left_join(cw %>% filter(pop > 0), by = c("GEOID" = "xid")) %>%
group_by(yid) %>%
summarise(
sth_pctdem_lagged = weighted.mean(sth_pctdem, w = frac_of_y),
uspgov_pctdem_lagged = weighted.mean(uspgov_pctdem, w = frac_of_y),
sth_frac_contested_lagged = weighted.mean(sth_is_uncontested == "contested", w = frac_of_y)
)
sth_uspgov_results %>%
left_join(cw %>% filter(pop > 0), by = c("GEOID" = "xid")) %>%
filter(yid == '2012_009_047_12_007')
sth_uspgov_results %>%
filter(year == year_) %>%
left_join(cw %>% filter(pop > 0), by = c("GEOID" = "xid")) %>%
group_by(yid) %>%
summarise(
sth_pctdem_lagged = weighted.mean(sth_pctdem, w = frac_of_y),
uspgov_pctdem_lagged = weighted.mean(uspgov_pctdem, w = frac_of_y),
sth_frac_contested_lagged = weighted.mean(sth_is_uncontested == "contested", w = frac_of_y)
)
year_ <- 2010
sth_uspgov_results %>%
filter(year == year_) %>%
left_join(cw %>% filter(pop > 0), by = c("GEOID" = "xid")) %>%
group_by(yid) %>%
summarise(
sth_pctdem_lagged = weighted.mean(sth_pctdem, w = frac_of_y),
uspgov_pctdem_lagged = weighted.mean(uspgov_pctdem, w = frac_of_y),
sth_frac_contested_lagged = weighted.mean(sth_is_uncontested == "contested", w = frac_of_y)
)
sth_uspgov_results %>%
filter(year == year_) %>%
left_join(cw %>% filter(pop > 0), by = c("GEOID" = "xid")) %>%
group_by(yid) %>%
summarise(
sth_pctdem_lagged = weighted.mean(sth_pctdem, w = frac_of_y),
uspgov_pctdem_lagged = weighted.mean(uspgov_pctdem, w = frac_of_y),
sth_frac_contested_lagged = weighted.mean(sth_is_uncontested == "contested", w = frac_of_y)
) %>%
mutate(year = as.character(asnum(year) + 2))
geo_results_lagged <- sth_uspgov_results %>%
filter(year == year_) %>%
left_join(cw %>% filter(pop > 0), by = c("GEOID" = "xid")) %>%
group_by(yid) %>%
summarise(
sth_pctdem_lagged = weighted.mean(sth_pctdem, w = frac_of_y),
uspgov_pctdem_lagged = weighted.mean(uspgov_pctdem, w = frac_of_y),
sth_frac_contested_lagged = weighted.mean(sth_is_uncontested == "contested", w = frac_of_y)
) %>%
mutate(year = as.character(asnum(year) + 2))
?pmax
head(geographies)
head(geographies[1,])
table(is.na(geographies$pop10))
sth_results_lagged <- geo_results_lagged %>%
left_join(geographies %>% filter(year == year_))
sth_results_lagged <- geo_results_lagged %>%
left_join(geographies %>% filter(year == year_), by=c("yid" = "GEOID"))
sth_results_lagged
geo_results_lagged <- sth_uspgov_results %>%
filter(year == year_) %>%
left_join(cw %>% filter(pop > 0), by = c("GEOID" = "xid")) %>%
group_by(yid) %>%
summarise(
sth_pctdem_lagged = weighted.mean(sth_pctdem, w = frac_of_y),
uspgov_pctdem_lagged = weighted.mean(uspgov_pctdem, w = frac_of_y),
sth_frac_contested_lagged = weighted.mean(sth_is_uncontested == "contested", w = frac_of_y)
) %>%
mutate(year = as.character(asnum(year) + 2)) %>%
rename(GEOID = yid)
sth_results_lagged <- geo_results_lagged %>%
left_join(geographies)
head(geographies)
sth_results_lagged <- geo_results_lagged %>%
left_join(geographies %>% as.data.frame %>% select(-geometry))
geographies %>% as.data.frame %>% select(-geometry)
sth_results_lagged <- geo_results_lagged %>%
left_join(year_to_geo_vintage) %>%
left_join(geographies %>% as.data.frame %>% select(-geometry))
head(sth_results_lagged)
head(sth_results_lagged) %>% as.data.frame()
sth_results_lagged <- geo_results_lagged %>%
left_join(year_to_geo_vintage) %>%
left_join(geographies %>% as.data.frame %>% select(-geometry)) %>%
group_by(year, sth) %>%
summarise(
sth_pctdem_lagged = weighted.mean(sth_pctdem_lagged, w=pop10),
uspgov_pctdem_lagged = weighted.mean(uspgov_pctdem_lagged, w=pop10),
sth_frac_contested_lagged = weighted.mean(sth_frac_contested_lagged, w=pop10)
)
sth_results_lagged
hist(sth_results_lagged$sth_frac_contested_lagged)
sth_uspgov_results
head(cw)
results_list <- list()
for(year_ in seq(2002, 2016, 2)){
vintage <- year_to_geo_vintage$vintage[year_to_geo_vintage$year == year_]
needed_vintage <- year_to_geo_vintage$vintage[year_to_geo_vintage$year == year_+2]
if(vintage != needed_vintage){
needed_crosswalk <- paste(vintage, needed_vintage, sep=',')
cw <- crosswalks[[needed_crosswalk]] %>% filter(pop > 0)
} else {
## dummmy cw
cw <- data.frame(
xid = unique(sth_uspgov_results$GEOID),
yid = unique(sth_uspgov_results$GEOID),
frac_of_x=1,
frac_of_y=1
)
}
geo_results_lagged <- sth_uspgov_results %>%
filter(year == year_) %>%
left_join(cw, by = c("GEOID" = "xid")) %>%
group_by(yid) %>%
summarise(
sth_pctdem_lagged = weighted.mean(sth_pctdem, w = frac_of_y),
uspgov_pctdem_lagged = weighted.mean(uspgov_pctdem, w = frac_of_y),
sth_frac_contested_lagged = weighted.mean(sth_is_uncontested == "contested", w = frac_of_y)
) %>%
mutate(year = as.character(asnum(year) + 2)) %>%
rename(GEOID = yid)
sth_results_lagged <- geo_results_lagged %>%
left_join(year_to_geo_vintage) %>%
left_join(geographies %>% as.data.frame %>% select(-geometry)) %>%
group_by(year, sth) %>%
summarise(
sth_pctdem_lagged = weighted.mean(sth_pctdem_lagged, w=pop10),
uspgov_pctdem_lagged = weighted.mean(uspgov_pctdem_lagged, w=pop10),
sth_frac_contested_lagged = weighted.mean(sth_frac_contested_lagged, w=pop10)
)
results_list[[as.character(year_)]] <- sth_results_lagged
}
sth_lagged <- do.call(rbind, results_list)
head(sth_lagged)
table(sth_lagged$year)
length(results_list)
names(results_list)
results_list[["2002"]]
year_ <- 2002
results_list <- list()
vintage <- year_to_geo_vintage$vintage[year_to_geo_vintage$year == year_]
needed_vintage
rm(list = ls())
9
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/chicago_2019/")
is_test <- FALSE
use_real_data <- TRUE
## TO THE ELECTION-SPECIFIC FOLDER
source("config.R")
source("../util.R")
source("../download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../generate_plots.R", chdir=TRUE)
library(rmarkdown)
# #######################
params <- safe_load("outputs/params.Rda")
if(
!exists("use_real_data") |
!exists("is_test")
) stop("must specify values first!")
run_iter <- run_iter + 1
run_iter <- 0
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
print("download_google_sheet")
if(use_real_data) raw_data <- download_google_sheet(config)
print("load_data")
data_load <- load_data(use_real_data, config, params)
raw_data <- data_load$raw_data
print("save_with_backup")
if(!use_real_data) print(data_load$fake_data$true_turnout)
print("fit_bootstrap")
bs <- fit_bootstrap(
raw_data,
params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=FALSE
)
config <- election_config
election_config <- config
raw_data
ref_turnout <- config$ref_turnout
single_fit <- bs$single_result
resid <- raw_data %>%
mutate(
total_turnout = bs$bootstrap_ci$turnout_500[minute],
time_of_day = single_fit$time_df$time_of_day[minute],
time_fit = single_fit$time_df$log_fit[minute],
re_fit = single_fit$precinct_df$re_fit[precinct_num],
resid = log_obs - time_fit - re_fit
)
raw_data$minute
ggplot(
bs$bootstrap_ci,
aes(
x = time_of_day,
y = turnout_500
)
) +
geom_point(data = resid, aes(y=total_turnout * exp(resid))) +
geom_ribbon(
aes(ymin = turnout_025, ymax = turnout_975),
alpha = 0.2,
color = NA,
fill = strong_purple
) +
geom_line(size = 2, color = strong_purple) +
scale_x_datetime("", date_labels = "%I", date_breaks = '1 hour') +
scale_y_continuous("", labels = scales::comma, limits = c(0, 600e3)) +
geom_hline(
yintercept = ref_turnout
) +
geom_text(
data = data.frame(
turnout_500 = ref_turnout,
time_of_day = rep(config$base_time + minutes(30), length(ref_turnout)),
label = sprintf("%s Turnout = %s", names(ref_turnout), scales::comma(ref_turnout))
),
aes(label = label),
vjust = 1.2,
hjust = 0
) +
expand_limits(x = config$election_day + hours(config$end_hour)) +
ggtitle("Estimated Election Turnout") +
theme_sixtysix()
config$base_time
config
config <- extend_config(config)
config$base_time
ggplot(
bs$bootstrap_ci,
aes(
x = time_of_day,
y = turnout_500
)
) +
geom_point(data = resid, aes(y=total_turnout * exp(resid))) +
geom_ribbon(
aes(ymin = turnout_025, ymax = turnout_975),
alpha = 0.2,
color = NA,
fill = strong_purple
) +
geom_line(size = 2, color = strong_purple) +
scale_x_datetime("", date_labels = "%I", date_breaks = '1 hour') +
scale_y_continuous("", labels = scales::comma, limits = c(0, 600e3)) +
geom_hline(
yintercept = ref_turnout
) +
geom_text(
data = data.frame(
turnout_500 = ref_turnout,
time_of_day = rep(config$base_time + minutes(30), length(ref_turnout)),
label = sprintf("%s Turnout = %s", names(ref_turnout), scales::comma(ref_turnout))
),
aes(label = label),
vjust = 1.2,
hjust = 0
) +
expand_limits(x = config$election_day + hours(config$end_hour)) +
ggtitle("Estimated Election Turnout") +
theme_sixtysix()
resid
resid$minute
resid$minute %>% max
resid$time_of_day
single_fit$time_df$time_of_day
raw_data$minute
config$base_time + minutes(455)
bs$bootstrap_ci$turnout_500
resid <- raw_data %>%
mutate(time_of_day = config$base_time + minutes(minute))
head(resid)
bs$bootstrap_ci$turnout_500
bs$bootstrap_ci$turnout_500 %>% length
dim(single_fit$time_df)
resid <- raw_data %>%
mutate(time_of_day = config$base_time + minutes(minute)) %>%
left_join(
single_fit$time_df %>%
select(time_of_day, log_fit) %>%
mutate(time_fit = bs$bootstrap_ci$turnout_500)
) %>%
mutate(
re_fit = single_fit$precinct_df$re_fit[precinct_num],
resid = log_obs - time_fit - re_fit
)
ggplot(
bs$bootstrap_ci,
aes(
x = time_of_day,
y = turnout_500
)
) +
geom_point(data = resid, aes(y=total_turnout * exp(resid))) +
geom_ribbon(
aes(ymin = turnout_025, ymax = turnout_975),
alpha = 0.2,
color = NA,
fill = strong_purple
) +
geom_line(size = 2, color = strong_purple) +
scale_x_datetime("", date_labels = "%I", date_breaks = '1 hour') +
scale_y_continuous("", labels = scales::comma, limits = c(0, 600e3)) +
geom_hline(
yintercept = ref_turnout
) +
geom_text(
data = data.frame(
turnout_500 = ref_turnout,
time_of_day = rep(config$base_time + minutes(30), length(ref_turnout)),
label = sprintf("%s Turnout = %s", names(ref_turnout), scales::comma(ref_turnout))
),
aes(label = label),
vjust = 1.2,
hjust = 0
) +
expand_limits(x = config$election_day + hours(config$end_hour)) +
ggtitle("Estimated Election Turnout") +
theme_sixtysix()
resid <- raw_data %>%
mutate(time_of_day = config$base_time + minutes(minute)) %>%
left_join(
single_fit$time_df %>%
select(time_of_day, log_fit) %>%
mutate(total_turnout = bs$bootstrap_ci$turnout_500)
) %>%
mutate(
re_fit = single_fit$precinct_df$re_fit[precinct_num],
resid = log_obs - time_fit - re_fit
)
resid <- raw_data %>%
mutate(time_of_day = config$base_time + minutes(minute)) %>%
left_join(
single_fit$time_df %>%
select(time_of_day, log_fit) %>%
rename(time_fit = log_fit) %>%
mutate(total_turnout = bs$bootstrap_ci$turnout_500)
) %>%
mutate(
re_fit = single_fit$precinct_df$re_fit[precinct_num],
resid = log_obs - time_fit - re_fit
)
ggplot(
bs$bootstrap_ci,
aes(
x = time_of_day,
y = turnout_500
)
) +
geom_point(data = resid, aes(y=total_turnout * exp(resid))) +
geom_ribbon(
aes(ymin = turnout_025, ymax = turnout_975),
alpha = 0.2,
color = NA,
fill = strong_purple
) +
geom_line(size = 2, color = strong_purple) +
scale_x_datetime("", date_labels = "%I", date_breaks = '1 hour') +
scale_y_continuous("", labels = scales::comma, limits = c(0, 600e3)) +
geom_hline(
yintercept = ref_turnout
) +
geom_text(
data = data.frame(
turnout_500 = ref_turnout,
time_of_day = rep(config$base_time + minutes(30), length(ref_turnout)),
label = sprintf("%s Turnout = %s", names(ref_turnout), scales::comma(ref_turnout))
),
aes(label = label),
vjust = 1.2,
hjust = 0
) +
expand_limits(x = config$election_day + hours(config$end_hour)) +
ggtitle("Estimated Election Turnout") +
theme_sixtysix()
rm(list = ls())
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/chicago_2019/")
is_test <- FALSE
use_real_data <- TRUE
source("../run_all.r", chdir=FALSE)
source("config.R")
source("../util.R")
source("../download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../generate_plots.R", chdir=TRUE)
library(rmarkdown)
params <- safe_load("outputs/params.Rda")
if(
!exists("use_real_data") |
!exists("is_test")
) stop("must specify values first!")
run_iter <- 0
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
print("download_google_sheet")
if(use_real_data) raw_data <- download_google_sheet(config)
print("load_data")
data_load <- load_data(use_real_data, config, params)
raw_data <- data_load$raw_data
raw_data
tail(raw_data)
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
print("download_google_sheet")
if(use_real_data) raw_data <- download_google_sheet(config)
raw_data
tail(raw_data)
raw_url <- config$google_doc
url <- construct_download_url(raw_url, format = "csv")
raw_data <- gsheet2tbl(url)
raw_data
write.csv(raw_data, file=paste0(save_dir,"/google_download.csv"), row.names = FALSE)
names(raw_data) <- c("timestamp", "ward", "div", "time_of_day", "obs")
raw_data$time <- ymd(config$election_ds, tz=config$timezone) + hms(raw_data$time_of_day)
raw_data <- raw_data %>%
filter(
time <= mdy_hms(timestamp, tz=config$timezone)
)
tail(raw_data)
raw_data <- raw_data %>%
filter(
mdy_hms(timestamp, tz=config$timezone) <= (
ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
)
)
raw_data <- raw_data %>%
mutate(row_number = 1:n()) %>%
mutate(
ward = sprintf("%02d", ward),
div = sprintf("%02d", div),
precinct=paste0(ward,div)
) %>%
select(timestamp, row_number, ward, div, precinct, time, obs)
config$end_hour
ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
raw_data$timestamp
ymd_hms(raw_data$timestamp, tz = config$timezone)
raw_data <- gsheet2tbl(url)
write.csv(raw_data, file=paste0(save_dir,"/google_download.csv"), row.names = FALSE)
names(raw_data) <- c("timestamp", "ward", "div", "time_of_day", "obs")
raw_data$time <- ymd(config$election_ds, tz=config$timezone) + hms(raw_data$time_of_day)
ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
ymd_hms(raw_data$timestamp, tz = config$timezone)
ymd_hms(raw_data$timestamp, tz = config$timezone)
raw_data$timestamp
raw_data$timestamp %>% mdy_hms
raw_data <- raw_data %>%
filter(
time <= mdy_hms(timestamp, tz=config$timezone)
)
raw_data$timestamp %>% mdy_hms(tz = config$timezone)
raw_data$time_of_day
raw_data <- raw_data %>%
filter(
mdy_hms(time_of_day, tz=config$timezone) <= (
ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
)
)
rm(list = ls())
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/chicago_2019/")
is_test <- FALSE
use_real_data <- TRUE
source("../run_all.r", chdir=FALSE)
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/chicago_2019/")
is_test <- FALSE
use_real_data <- TRUE
source("../run_all.r", chdir=FALSE)
