) +
geom_boxplot(outlier.color = NA) +
theme_sixtysix() +
theme(axis.text.x = element_text(angle = 90, hjust=1, vjust=0.5)) +
ylim(-1,1)+
ggtitle(
paste("Coefficients of", condition_name),
paste("Holdout:", bs@holdout_year)
)
}
coef_plot(bs, 'contested')
coef_plot(bs, 'previously_uncontested')
coef_plot(bs, 'uncontested')
get_pred_with_true_results <- function(bs){
true_results <- bs@pred %>%
filter(year == bs@holdout_year) %>%
supplement_pred(bs@holdout_year)
true_results
}
gg_race_pred <- function(bs){
holdout_year <- bs@holdout_year
true_results <- get_pred_with_true_results(bs)
race_order <- bs@test_sample %>%
group_by(race) %>%
summarise(m = mean(pred_samp)) %>%
with(race[order(m)])
ggplot(
bs@test_sample %>% mutate(race = factor(race, levels = race_order)),
aes(x=race, y=pred_samp)
) +
geom_hline(yintercept=0.5, size=1, color = 'grey30')+
geom_boxplot(outlier.colour = NA, alpha = 0.5)+
geom_point(
data = true_results,
aes(y=sth_pctdem),
color="blue"
) +
theme_sixtysix()+
theme(
panel.grid.major.x = element_blank(),
axis.text.x = element_blank()
) +
xlab("race (sorted by predicted pct dem)") +
scale_y_continuous("pct dem", breaks = seq(0,1,0.25))+
ggtitle(paste("Race-by-race predictions for", holdout_year), "Blue is actual results.")
}
gg_race_pred(bs)
coef_plot(bs, 'contested')
gg_race_scatter <- function(bs){
holdout_year <- bs@holdout_year
true_results <- get_pred_with_true_results(bs)
ggplot(
bs@test_sample %>%
group_by(race, sth, condition) %>%
summarise(
ymean = mean(pred_samp),
ymin = quantile(pred_samp, 0.025),
ymax = quantile(pred_samp, 0.975)
) %>%
left_join(true_results),
aes(x=sth_pctdem, y=ymean)
) +
geom_abline(slope=1, size=1, color = 'grey30')+
geom_linerange(
aes(ymin=ymin, ymax=ymax, group=race)
)+
geom_point(
aes(y=ymean, color=condition)
) +
theme_sixtysix()+
xlab("True Result") +
scale_y_continuous("Prediction", breaks = seq(0,1,0.25))+
coord_fixed() +
ggtitle("Race prediction intervals", holdout_year)
}
gg_race_scatter(bs)
gg_resid <- function(bs){
holdout_year <- bs@holdout_year
true_results <- get_pred_with_true_results(bs)
pctl <- bs@test_sample %>%
filter(condition != "uncontested") %>%
left_join(true_results) %>%
group_by(race, sth, condition) %>%
summarise(pctl = mean(sth_pctdem > pred_samp))
ggplot(pctl, aes(x=pctl, fill = condition)) +
geom_histogram(binwidth = 0.05) +
scale_fill_manual(
values = c(
contested = strong_green,
previously_uncontested = strong_purple
)
) +
theme_sixtysix()
}
gg_resid(bs)
map_residuals <- function(bs, cond_name, df0=vote_df){
holdout_year <- bs@holdout_year
sf_vintage <- sth_vintage %>% filter(year==holdout_year) %>% with(vintage)
sf <- sth_sf %>% filter(vintage == sf_vintage)
bs_pred <- bs@test_sample %>%
group_by(sth, race, condition) %>%
summarise(
pred = mean(pred)
) %>%
left_join(df0 %>% select(race, sth_pctdem)) %>%
mutate(resid = sth_pctdem - pred)
ggplot(
sf %>%
left_join(bs_pred %>% filter(condition == cond_name))
) +
geom_sf(data = pa_union) +
geom_point(
aes(x=x, y=y, size=abs(resid), color=ifelse(resid < 0, "Dem", "Rep"))
) +
scale_color_manual(
values=c(Dem = strong_blue, Rep = strong_red),
guide=FALSE
) +
scale_size_area(guide = FALSE) +
theme_map_sixtysix() +
ggtitle(
paste("Residual Map for", holdout_year,",", cond_name,"model"),
"Blue means Dem overpredicted, Red means Rep"
)
}
map_residuals(bs, "contested")
pivotal_bs <- function(x, q){
mean_x <- mean(x)
q0 <- 1 - q
raw_quantiles <- quantile(x, q0)
true_quantiles <- 2 * mean_x - raw_quantiles
names(true_quantiles) <- scales::percent(q)
return(true_quantiles)
}
gg_pred_hist(bs)
gg_pred_hist <- function(bs, true_line=TRUE, df0=vote_df){
holdout_year <- bs@holdout_year
print("bootstrapped predictions")
pred_total <- bs@test_sample %>%
group_by(sim) %>%
summarise(n_dem_wins = sum(pred_samp > 0.5)) %>%
group_by()
print(paste("Total NA:", sum(is.na(pred_total$n_dem_wins))))
pred_total <- pred_total %>% filter(!is.na(n_dem_wins))
print(mean(pred_total$n_dem_wins))
print(pivotal_bs(pred_total$n_dem_wins, c(0.025, 0.2, 0.8, 0.975)))
if(true_line){
print("actual results")
true_dem_wins <- df0[df0$year == holdout_year,] %>% with(sum(sth_pctdem > 0.5))
print(true_dem_wins)
gg_annotation <- function()
annotate(
geom="text",
x = true_dem_wins,
y = 10,
angle = 90,
hjust = 0,
vjust = 1.1,
label = paste("True outcome =", true_dem_wins)
)
} else {
true_dem_wins <- numeric(0)
gg_annotation <- geom_blank
}
ggplot(pred_total, aes(x = n_dem_wins, fill = n_dem_wins < 101.5)) +
geom_histogram(binwidth = 1) +
geom_vline(xintercept = true_dem_wins) +
gg_annotation() +
ggtitle(paste("Predicted Democratic seats in", holdout_year)) +
xlab("N Democratic Seats") +
ylab("N Bootstrap Sims") +
theme_sixtysix() +
scale_fill_manual(
values = c(`TRUE`=strong_red, `FALSE` = strong_blue),
guide = FALSE
)
}
gg_pred_hist(bs)
bs_years <- list()
for(holdout in seq(2004, 2016, 2)){
print(paste("###", holdout, "###"))
bs_years[[as.character(holdout)]] <- bootstrap(
vote_df,
holdout,
conditions,
verbose=FALSE
)
}
for(holdout in seq(2004, 2016, 2)){
gg_pred_hist(bs_years[[as.character(holdout)]]) %>% print()
}
gg_race_pred(bs_years[['2010']])
gg_race_scatter(bs_years[['2010']])
map_residuals(bs_years[['2010']], "contested")
coef_df <- do.call(
rbind,
lapply(
bs_years,
function(bs) {
bs@coefs %>%
group_by(term, condition) %>%
summarise(estimate=mean(estimate)) %>%
mutate(year = bs@holdout_year)
}
)
)
ggplot(
coef_df,
aes(x = interaction(condition, term), y=estimate)
) +
geom_point(aes(color = (year == 2010))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
load("outputs/df_2018.rda")
df_2018 <- df_2018 %>% add_cols()
df_2018 <- add_condition(df_2018, conditions)
vote_df <- bind_rows(vote_df, df_2018)
pred_2018 <- bootstrap(
vote_df,
holdout_year=2018,
conditions=conditions
)
pred_2018 <- bootstrap(
vote_df,
holdout_year=2018,
conditions=conditions
)
gg_race_pred(pred_2018)
gg_pred_hist(pred_2018, true_line = FALSE)
results_2018 <- read.csv(
"data/UnOfficial_11232018092637AM.CSV"
) %>%
mutate(
vote_total = asnum(gsub("\\,","",Votes)),
sth = sprintf("%03d", asnum(gsub("^([0-9]+)[a-z].*", "\\1", District.Name))),
party = ifelse(
Party.Name == "Democratic", "DEM",
ifelse(Party.Name == "Republican", "REP", NA)
)
) %>%
mutate(
party = replace(
party,
Candidate.Name %in% c(
"BERNSTINE, AARON JOSEPH ",  "SANKEY, THOMAS R III", "GABLER, MATTHEW M "),
"REP"
),
party = replace(party, Candidate.Name == "LONGIETTI, MARK ALFRED ", "DEM")
) %>%
filter(!is.na(party)) %>%
group_by(sth, party) %>%
summarise(votes = sum(vote_total)) %>%
group_by(sth) %>%
summarise(sth_pctdem = sum(votes * (party == "DEM")) / sum(votes))
vote_df <- left_join(vote_df, results_2018, by = "sth", suffix = c("",".2018")) %>%
mutate(
sth_pctdem = ifelse(
substr(race,1,4)=="2018",
sth_pctdem.2018,
sth_pctdem
)
) %>% select(-sth_pctdem.2018)
gg_pred_hist(pred_2018)
knitr::opts_chunk$set(
load("C:/Users/Jonathan Tannen/Dropbox/sixty_six/data/processed_data/df_major_2017_12_01.Rda")
head(df_major)
df_major %>%
filter(election == 'primary')
library(dplyr)
df_major %>%
filter(election == 'primary')
library(tibble)
library(tidyr)
library(dplyr)
library(tibble)
library(tidyr)
table(df_major$year)
save(turnout, "turnout_df.Rda")
library(ggplot2)
library(dplyr)
library(ggthemes)
library(scales)
library(colorspace)
library(tidyr)
library(sf)
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_2019_primary/")
load("../../data/processed_data/df_major_2017_12_01.Rda")
source("../../admin_scripts/util.R")
turnout <- df_major %>%
filter(OFFICE %in% c(
"PRESIDENT OF THE UNITED STATES",
"GOVERNOR",
"MAYOR",
"DISTRICT ATTORNEY"
)) %>%
group_by(WARD16, DIV16, year, election) %>%
summarise(VOTES = sum(VOTES))
df_2018 <- read.csv("../../data/raw_election_data/2018_general.csv")
head(df_2018)
names(df_2018)<- c("WARD16", "DIV16", "TYPE", "OFFICE", "CANDIDATE", "PARTY", "VOTES")
df_2018$WARD16 <- sprintf("%02d", df_2018$WARD16)
df_2018$DIV16 <- sprintf("%02d", df_2018$DIV16)
df_2018 %>%
group_by(OFFICE) %>%
summarise(votes = sum(VOTES)) %>%
arrange(desc(votes))
df_2018 <- df_2018 %>% filter(OFFICE == "GOVERNOR AND LIEUTENANT GOVERNOR") %>%
group_by(WARD16, DIV16) %>%
summarise(VOTES = sum(VOTES))
df_2018$election <- "general"
df_2018$year <- "2018"
df_2018_primary <- read.csv("../../data/raw_election_data/2018_primary.csv")
head(df_2018_primary)
names(df_2018_primary)<- c("WARD16", "DIV16", "TYPE", "OFFICE", "CANDIDATE", "PARTY", "VOTES")
df_2018_primary$WARD16 <- sprintf("%02d", df_2018_primary$WARD16)
df_2018_primary$DIV16 <- sprintf("%02d", df_2018_primary$DIV16)
df_2018_primary <- df_2018_primary %>% filter(PARTY == "DEMOCRATIC") %>%
mutate(OFFICE = gsub("(.*)-DEM$", "\\1", OFFICE))
df_2018_primary %>%
group_by(OFFICE) %>%
summarise(votes = sum(VOTES)) %>%
arrange(desc(votes))
df_2018_primary <- df_2018_primary %>% filter(OFFICE == "GOVERNOR") %>%
group_by(WARD16, DIV16) %>%
summarise(VOTES = sum(VOTES))
df_2018_primary$election <- "primary"
df_2018_primary$year <- "2018"
turnout <- bind_rows(turnout, df_2018)
turnout <- bind_rows(turnout, df_2018_primary)
save(turnout, "turnout_df.Rda")
save(turnout, file="turnout_df.Rda")
load("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_2019_primary/turnout_df.Rda")
head(turnout)
head(df_major)
head(turnout)
turnout %>%
mutate(
WARD_DIVSN = paste0(WARD16, DIV16),
year = paste(year, election)
) %>%
select(WARD_DIVSN, year, VOTES)
turnout %>%
group_by() %>%
mutate(
WARD_DIVSN = paste0(WARD16, DIV16),
year = paste(year, election)
) %>%
select(WARD_DIVSN, year, VOTES)
write.csv()
turnout <- turnout %>%
group_by() %>%
mutate(
WARD_DIVSN = paste0(WARD16, DIV16),
year = paste(year, election)
) %>%
select(WARD_DIVSN, year, VOTES)
write.csv(
turnout,
file = "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/phila_201905/data/phila_turnout.csv",
row.names=FALSE
)
turnout %>% filter(year == "2015 general")
turnout %>% filter(year == "2015 general") %>% with(sum(VOTES))
turnout %>% filter(year == "2015 primary") %>% with(sum(VOTES))
turnout %>% filter(year == "2017 primary") %>% with(sum(VOTES))
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/phila_example/")
source("config.R")
source("../util.R")
source("../download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../generate_plots.R", chdir=TRUE)
library(rmarkdown)
#######################
## BEFORE ELECTION DAY
#######################
source("../prep_shapefiles.R", chdir = TRUE)
prep_shapefile(
config$precinct_shp_path,
config$get_precinct_id,
config$get_ward_from_precinct
)
## Precompute the historic parameters
source("../calc_params.R", chdir=TRUE)
df <- read_csv(config$turnout_df_path)
precincts <- safe_load("data/precincts.Rda")
wards <- safe_load("data/wards.Rda")
params <- calc_params(
turnout_df=df,
n_svd=3
)
diagnostics(params, precincts)
save_with_backup(params, stem="params", dir="outputs")
library(tidyverse)
# ## BEFORE ELECTION DAY
# #######################
# source("../prep_shapefiles.R", chdir = TRUE)
# prep_shapefile(
#   config$precinct_shp_path,
#   config$get_precinct_id,
#   config$get_ward_from_precinct
# )
#
## Precompute the historic parameters
source("../calc_params.R", chdir=TRUE)
df <- read_csv(config$turnout_df_path)
precincts <- safe_load("data/precincts.Rda")
wards <- safe_load("data/wards.Rda")
params <- calc_params(
turnout_df=df,
n_svd=3
)
head(df)
config
getwd()
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/phila_201905/")
rm(list = ls())
source("config.R")
source("../util.R")
source("../download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../generate_plots.R", chdir=TRUE)
library(rmarkdown)
library(tidyverse)
source("../prep_shapefiles.R", chdir = TRUE)
prep_shapefile(
config$precinct_shp_path,
config$get_precinct_id,
config$get_ward_from_precinct
)
# ## BEFORE ELECTION DAY
# #######################
# source("../prep_shapefiles.R", chdir = TRUE)
# prep_shapefile(
#   config$precinct_shp_path,
#   config$get_precinct_id,
#   config$get_ward_from_precinct
# )
#
## Precompute the historic parameters
source("../calc_params.R", chdir=TRUE)
df <- read_csv(config$turnout_df_path)
probs(df)
df <- read_csv(config$turnout_df_path, col_types = "ccd")
head(df)
precincts <- safe_load("data/precincts.Rda")
wards <- safe_load("data/wards.Rda")
params <- calc_params(
turnout_df=df,
n_svd=3
)
head(df)
load("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_2019_primary/turnout_df.Rda")
head(turnout)
turnout <- turnout %>%
group_by() %>%
mutate(
precinct = paste0(WARD16, DIV16),
year = paste(year, election)
) %>%
rename(turnout = VOTES) %>%
select(precinct, year, turnout)
write.csv(
turnout,
file = "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/phila_201905/data/phila_turnout.csv",
row.names=FALSE
)
rm(list = ls())
source("config.R")
source("../util.R")
source("../download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../generate_plots.R", chdir=TRUE)
library(rmarkdown)
library(tidyverse)
## BEFORE ELECTION DAY
#######################
source("../prep_shapefiles.R", chdir = TRUE)
prep_shapefile(
config$precinct_shp_path,
config$get_precinct_id,
config$get_ward_from_precinct
)
## Precompute the historic parameters
source("../calc_params.R", chdir=TRUE)
df <- read_csv(config$turnout_df_path, col_types = "ccd")
precincts <- safe_load("data/precincts.Rda")
wards <- safe_load("data/wards.Rda")
params <- calc_params(
turnout_df=df,
n_svd=3
)
df <- read_csv(config$turnout_df_path, col_types = "ccd")
precincts <- safe_load("data/precincts.Rda")
wards <- safe_load("data/wards.Rda")
required_columns <- c("precinct", "year", "turnout")
if(!all(required_columns %in% names(df))) stop(
"turnout_df must have columns %s.",
paste(required_columns, collapse = ", ")
)
precincts <- unique(df$precinct)
years <- unique(df$year)
precincts
all_rows <- expand.grid(precinct=precincts, year=years)
all_rows
missing_rows <- anti_join(all_rows, df)
missing_rows
w19 <- st_read("C:/Users/Jonathan Tannen/Dropbox/sixty_six/data/gis/2019/Political_Divisions.shp")
head(w19)
w19 %>% filter(substr(DIVISION_N,1 ,2) == "05")
w19 %>% filter(substr(DIVISION_N,1 ,2) == "05") %>% arrange(desc(DIVISION_N))
