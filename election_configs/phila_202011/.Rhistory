n_boot=40,
method="loess", verbose=T)
bs_old@bs_results
hist_bootstrap(bs_old)
get_ci_from_bs(bs, predict_topline, keys="time_of_day")
get_ci_from_bs(bs_old, predict_topline, keys="time_of_day")
get_ci_from_bs(bs_gam, predict_topline, keys="time_of_day")
get_ci_from_bs(bs_gam, predict_topline, keys="time_of_day") %>% filter_to_eod()
get_ci_from_bs(bs_old, predict_topline, keys="time_of_day") %>% filter_to_eod()
bs <- bs_old
# setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/")
library(dplyr)
library(stargazer)
source(add_election_path("config.R"), chdir=TRUE)
source("R/util.R", chdir=TRUE)
turnout_plot(bs, raw_data, config, mail_in=351e3)
bs_old
raw_data
bs <- bs_old
turnout_plot(bs, raw_data, config, mail_in=351e3)
get_ward <- config$get_ward_from_precinct
source(add_election_path("config.R"), chdir=TRUE)
source("R/util.R", chdir=TRUE)
getwd()
source("R/util.R", chdir=TRUE)
source(add_election_path("config.R"), chdir=TRUE)
source("R/util.R", chdir=TRUE)
source("R/generate_plots.R", chdir=TRUE)
source("R/bootstrap.R", chdir=TRUE)
config <- extend_config(config)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE)
params <- readRDS(output_file("params.Rds"))
get_ward <- config$get_ward_from_precinct
raw_data <- readRDS(output_file("raw_data.Rds")) %>%
mutate(
ward=get_ward(precinct),
time_of_day=config$base_time + minutes(minute)
)
current_time <- max(bs@raw_result@time_df$time_of_day)
turnout_df <- get_ci_from_bs(bs, predict_topline, keys="time_of_day")
current_turnout <- filter_to_eod(turnout_df)
ward_turnout <- get_ci_from_bs(
bs,
predict_ward_turnout,
get_ward=get_ward,
keys="ward"
)
precinct_turnout <- get_ci_from_bs(
bs,
predict_precinct_eod,
keys="precinct"
)
turnout_plot(bs, raw_data, config, mail_in=351e3)
turnout_plot(bs, raw_data, config, mail_in=351e3)
bs <- bs_gam
turnout_plot(bs, raw_data, config, mail_in=351e3)
# turnout_map <- gg_wards_predicted(wards, current_time, config)
turnout_map <- leaflet_wards_total(wards, raw_data, mail_in, config, current_time)
turnout_map
get_ward <- config$get_ward_from_precinct
raw_data <- readRDS(output_file("raw_data.Rds")) %>%
mutate(
ward=get_ward(precinct),
time_of_day=config$base_time + minutes(minute)
)
current_time <- max(bs@raw_result@time_df$time_of_day)
turnout_df <- get_ci_from_bs(bs, predict_topline, keys="time_of_day")
current_turnout <- filter_to_eod(turnout_df)
ward_turnout <- get_ci_from_bs(
bs,
predict_ward_turnout,
get_ward=get_ward,
keys="ward"
)
bs <- bs_gam
current_time <- max(bs@raw_result@time_df$time_of_day)
turnout_df <- get_ci_from_bs(bs, predict_topline, keys="time_of_day")
current_turnout <- filter_to_eod(turnout_df)
ward_turnout <- get_ci_from_bs(
bs,
predict_ward_turnout,
get_ward=get_ward,
keys="ward"
)
precinct_turnout <- get_ci_from_bs(
bs,
predict_precinct_eod,
keys="precinct"
)
get_ward <- config$get_ward_from_precinct
raw_data <- readRDS(output_file("raw_data.Rds")) %>%
mutate(
ward=get_ward(precinct),
time_of_day=config$base_time + minutes(minute)
)
current_time <- max(bs@raw_result@time_df$time_of_day)
turnout_df <- get_ci_from_bs(bs, predict_topline, keys="time_of_day")
current_turnout <- filter_to_eod(turnout_df)
turnout_df
ward_turnout <- get_ci_from_bs(
bs,
predict_ward_turnout,
get_ward=get_ward,
keys="ward"
)
ward_turnout
precinct_turnout <- get_ci_from_bs(
bs,
predict_precinct_eod,
keys="precinct"
)
get_ci_from_bs
predict_precinct_eod
bs <- bs_old
precinct_turnout <- get_ci_from_bs(
bs,
predict_precinct_eod,
keys="precinct"
)
bs <- bs_gam
precinct_turnout <- get_ci_from_bs(
bs,
predict_precinct_eod,
keys="precinct"
)
predict_precinct_eod
get_ci_from_bs
get_ci
predict_precinct_eod
predict_precinct_eod(bs_gam@bs_results[[1]])
predict_precinct_eod(bs_gam@bs_results[[10]])
predict_precinct_eod(bs_gam@bs_results[[10]]) %>% tail
predict_precinct_eod
predict_precinct_eod <- function(model_predictions){
exp_time_fit_eod <- model_predictions@time_df %>%
filter_to_eod() %>%
with(exp(log_fit))
model_predictions@precinct_df %>%
mutate(turnout = exp(re_fit) * exp_time_fit_eod) %>%
select(precinct, precinct_fe, re_fit, turnout)
}
bs <- bs_gam
precinct_turnout <- get_ci_from_bs(
bs,
predict_precinct_eod,
keys="precinct"
)
wards <- readRDS(add_election_path("data/wards.Rds"))
wards <- wards %>% left_join(ward_turnout)
mail_in <- readRDS(output_file("mail_in.Rds"))
mail_count <- get_mail_count(save_dir=OUTPUT_DIR)
# turnout_map <- gg_wards_predicted(wards, current_time, config)
turnout_map <- leaflet_wards_total(wards, raw_data, mail_in, config, current_time)
turnout_map
# turnout_map <- gg_wards_predicted(wards, current_time, config)
turnout_map <- leaflet_change(wards, raw_data, mail_in, config, current_time)
turnout_map
# turnout_map <- gg_wards_predicted(wards, current_time, config)
turnout_map <- leaflet_wards_predicted(wards, raw_data, mail_in, config, current_time)
turnout_map
bs <- bs_old
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE)
params <- readRDS(output_file("params.Rds"))
get_ward <- config$get_ward_from_precinct
raw_data <- readRDS(output_file("raw_data.Rds")) %>%
mutate(
ward=get_ward(precinct),
time_of_day=config$base_time + minutes(minute)
)
current_time <- max(bs@raw_result@time_df$time_of_day)
turnout_df <- get_ci_from_bs(bs, predict_topline, keys="time_of_day")
current_turnout <- filter_to_eod(turnout_df)
ward_turnout <- get_ci_from_bs(
bs,
predict_ward_turnout,
get_ward=get_ward,
keys="ward"
)
precinct_turnout <- get_ci_from_bs(
bs,
predict_precinct_eod,
keys="precinct"
)
precinct_turnout <- get_ci_from_bs(
bs,
predict_precinct_eod,
keys="precinct"
)
wards <- readRDS(add_election_path("data/wards.Rds"))
wards <- wards %>% left_join(ward_turnout)
mail_in <- readRDS(output_file("mail_in.Rds"))
mail_count <- get_mail_count(save_dir=OUTPUT_DIR)
tp <- turnout_plot(bs, raw_data, config, mail_in=351e3)
tp
# turnout_map <- gg_wards_predicted(wards, current_time, config)
turnout_map <- leaflet_wards_total(wards, raw_data, mail_in, config, current_time)
turnout_map
# turnout_map <- gg_wards_predicted(wards, current_time, config)
turnout_map <- leaflet_change(wards, raw_data, mail_in, config, current_time)
turnout_map
# turnout_map <- gg_wards_predicted(wards, current_time, config)
turnout_map <- leaflet_wards_predicted(wards, raw_data, mail_in, config, current_time)
turnout_map
library(testthat)
library(dplyr)
library(readr)
test_elections <- tribble(
~folder, ~turnout,
"phila_201911", 306e3,
"phila_201905", 243e3,
"phila_201811", 553e3,
"phila_201805", 170e3
)
TRACKER_DIR <- "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/"
olddir <- setwd(TRACKER_DIR)
source("load_data.R", chdir=TRUE)
source("R/load_data.R", chdir=TRUE)
source("R/fit_submissions.R", chdir=TRUE)
source("R/bootstrap.R", chdir=TRUE)
source("R/precalc_params.R", chdir=TRUE)
config_dir <- function(election){
sprintf("%s/elections/%s", TRACKER_DIR, election)
}
set.seed(215)
results <- data.frame()
i <- 1
folder <- test_elections$folder[i]
true_turnout <- test_elections$turnout[i]
print("#########################################")
print(folder)
print("#########################################")
setwd(config_dir(folder))
config_dir
sprintf("%s/election_configs/%s", TRACKER_DIR, election)
config_dir <- function(election){
sprintf("%s/election_configs/%s", TRACKER_DIR, election)
}
setwd(config_dir(folder))
source("config.R")
print("CALCULATING PARAMS")
turnout_df <- read_csv(config$turnout_df_path, col_types = "ccd")
precincts <- readRDS("data/precincts.Rds")
wards <- readRDS("data/wards.Rds")
params <- calc_params(
turnout_df=turnout_df,
n_svd=3
)
print("FITTING DATA")
google_rds <- "outputs/google_download.Rds"
data_load <- load_data(TRUE, config, params, google_rds)
raw_data <- data_load$raw_data
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=TRUE
)
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
# use_inverse=FALSE,
verbose=TRUE
)
i <- 2
folder <- test_elections$folder[i]
folder
true_turnout <- test_elections$turnout[i]
true_turnout
print(folder)
setwd(config_dir(folder))
source("config.R")
print("CALCULATING PARAMS")
turnout_df <- read_csv(config$turnout_df_path, col_types = "ccd")
precincts <- readRDS("data/precincts.Rds")
wards <- readRDS("data/wards.Rds")
params <- calc_params(
turnout_df=turnout_df,
n_svd=3
)
print("FITTING DATA")
google_rds <- "outputs/google_download.Rds"
getwd()
google_rds <- "outputs/google_download.Rds"
data_load <- load_data(TRUE, config, params, google_rds)
raw_data <- data_load$raw_data
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
# use_inverse=FALSE,
verbose=TRUE,
method="gam"
)
ci <- get_ci_from_bs(
bs,
predict_topline,
keys=c("time_of_day"),
eod=TRUE
)
ci
print("Boostrapped CIs")
print(round(ci[c("p025", "p975")]))
print(sprintf("True Turnout: %s", true_turnout))
expect_gt(ci$p975, true_turnout)
expect_lt(ci$p025, true_turnout)
bs_gam <- bs
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=TRUE,
method="loess"
)
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
# use_inverse=FALSE,
verbose=TRUE,
method="loess"
)
ci <- get_ci_from_bs(
bs,
predict_topline,
keys=c("time_of_day"),
eod=TRUE
)
ci
turnout_plot(bs, raw_data, config)
raw_data %<>%mutate(
ward=get_ward(precinct),
time_of_day=config$base_time + minutes(minute)
)
head(raw_data)
config <- extend_config(config)
raw_data %<>%mutate(
ward=get_ward(precinct),
time_of_day=config$base_time + minutes(minute)
)
turnout_plot(bs, raw_data, config)
true_turnout
turnout_plot(bs_gam, raw_data, config)
test_elections <- tribble(
~folder, ~turnout,
"phila_202011", 360e3,
"phila_201911", 306e3,
"phila_201905", 243e3,
"phila_201811", 553e3,
"phila_201805", 170e3
)
TRACKER_DIR <- "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/"
olddir <- setwd(TRACKER_DIR)
source("R/load_data.R", chdir=TRUE)
source("R/fit_submissions.R", chdir=TRUE)
source("R/bootstrap.R", chdir=TRUE)
source("R/precalc_params.R", chdir=TRUE)
config_dir <- function(election){
sprintf("%s/election_configs/%s", TRACKER_DIR, election)
}
set.seed(215)
results <- data.frame()
folder <- test_elections$folder[i]
true_turnout <- test_elections$turnout[i]
i
i <- 1
folder <- test_elections$folder[i]
true_turnout <- test_elections$turnout[i]
print("#########################################")
print(folder)
print("#########################################")
setwd(config_dir(folder))
source("config.R")
print("CALCULATING PARAMS")
turnout_df <- read_csv(config$turnout_df_path, col_types = "ccd")
precincts <- readRDS("data/precincts.Rds")
wards <- readRDS("data/wards.Rds")
params <- calc_params(
turnout_df=turnout_df,
n_svd=3
)
diagnostics(params, precincts, config)
print("FITTING DATA")
google_rds <- "outputs/google_download.Rds"
data_load <- load_data(TRUE, config, params, google_rds)
raw_data <- data_load$raw_data
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
# use_inverse=FALSE,
verbose=TRUE,
method="loess"
)
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
# use_inverse=FALSE,
verbose=TRUE,
method="gam"
)
turnout_plot(bs, raw_data, config)
raw_data %<>% mutate(
ward=get_ward(precinct),
time_of_day=config$base_time + minutes(minute)
)
config <- extend_config(config)
raw_data %<>% mutate(
ward=get_ward(precinct),
time_of_day=config$base_time + minutes(minute)
)
turnout_plot(bs, raw_data, config)
ceiling(max(raw_data$minute) / 60)
fit_gam <- function(
raw_data,
params,
election_config,
sigma_noise=0.1,
tol=1e-10,
verbose=TRUE
){
# validate_config(election_config)
K <- ncol(params@svd$u)
config <- extend_config(election_config)
cov_svd <- with(params@svd, u %*% diag(d[1:K]) %*% cov(v) %*% diag(d[1:K]) %*% t(u))
## Hacky way to reverse engineer what the division noise was
sigma_div <- diag(params@precinct_cov[1:6, 1:6] - cov_svd[1:6, 1:6])
if(max(abs(sigma_div) - sigma_div[1]) > 1e-10) stop("Noise expected to be all equal.")
hourly_knots <- ceiling(max(raw_data$minute) / 60)
ud_div <- with(params@svd, u %*% diag(d[1:K]))[raw_data$precinct_num,]
colnames(ud_div) <- paste0("UD.", 1:3)
raw_data <- cbind(raw_data, as.data.frame(ud_div))
raw_data$precinct_fe <- params@precinct_fe$precinct_fe[raw_data$precinct_num]
fit <- mgcv::gam(
log_obs ~
s(minute, bs="cr", k=ceiling(hourly_knots/4)) +
offset(precinct_fe) +
UD.1 + UD.2 + UD.3 +
s(precinct, bs="re")
,
data=raw_data %>% mutate(precinct = factor(precinct))
)
list(
raw_data=raw_data,
params=params,
fit=fit
)
}
source("R/load_data.R", chdir=TRUE)
TRACKER_DIR <- "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/"
olddir <- setwd(TRACKER_DIR)
source("R/load_data.R", chdir=TRUE)
source("R/fit_submissions.R", chdir=TRUE)
source("R/bootstrap.R", chdir=TRUE)
source("R/precalc_params.R", chdir=TRUE)
config_dir <- function(election){
sprintf("%s/election_configs/%s", TRACKER_DIR, election)
}
set.seed(215)
results <- data.frame()
i
folder <- test_elections$folder[i]
true_turnout <- test_elections$turnout[i]
print("#########################################")
print(folder)
print("#########################################")
setwd(config_dir(folder))
source("config.R")
print("CALCULATING PARAMS")
turnout_df <- read_csv(config$turnout_df_path, col_types = "ccd")
precincts <- readRDS("data/precincts.Rds")
wards <- readRDS("data/wards.Rds")
params <- calc_params(
turnout_df=turnout_df,
n_svd=3
)
print("FITTING DATA")
google_rds <- "outputs/google_download.Rds"
data_load <- load_data(TRUE, config, params, google_rds)
raw_data <- data_load$raw_data
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
# use_inverse=FALSE,
verbose=TRUE,
method="gam"
)
config <- extend_config(config)
raw_data %<>% mutate(
ward=get_ward(precinct),
time_of_day=config$base_time + minutes(minute)
)
turnout_plot(bs, raw_data,config)
install.packages("usetihis")
install.packages("usethis")
rm(list=ls())
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
