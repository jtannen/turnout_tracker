color = NA
) +
scale_fill_viridis_c(
"Submissions",
option = "plasma"
) +
ggtitle("Data Submissions",
paste("Number of people who have submitted their voter number.", subtitle)
) +
theme_map_sixtysix()
}
gg_wards_relative(wards)
gg_wards_predicted(wards)
gg_wards_submissions(wards, raw_data)
gg_wards_submissions <- function(wards, raw_data) {
ggplot(
wards %>%
left_join(
raw_data %>%
group_by(ward) %>%
count(),
by = c('WARD'='ward')
)
) +
geom_sf(
aes(fill = n),
color = NA
) +
scale_fill_viridis_c(
"Submissions",
option = "plasma"
) +
ggtitle("Data Submissions",
paste("Number of people who have submitted their voter number.",
get_subtitle(wards$time_of_day))
) +
theme_map_sixtysix()
}
gg_wards_relative(wards)
gg_wards_predicted(wards)
gg_wards_submissions(wards, raw_data)
gg_wards_labelled(wards)
ward_df
ward_turnout
bs$single_result$full_predictions %>%
mutate(ward = substr(precinct, 1, 2))
bs$single_result$full_predictions %>%
mutate(ward = substr(precinct, 1, 2)) %>%
filter(time_of_day == current_time)
groups(bs$single_result$full_predictions)
bs$bootstrap_ci
head(bs$bootstrap_df)
bs$bootstrap_ci
ward_turnout
## TODO ward-level CIs
stargazer(
ward_turnout %>% mutate(turnout_high = NA, turnout_low=NA),
select(ward, time_of_day, turnout, turnout_high, turnout_low) %>%
mutate_at(
vars(turnout, turnout_high, turnout_low),
funs(round)
),
type = "html",
title = "Estimated Turnout by Ward",
summary = FALSE,
rownames = FALSE
)
head(ward_turnout)
ward_turnout %>% mutate(turnout_high = NA, turnout_low=NA)
## TODO ward-level CIs
stargazer(
ward_turnout %>%
mutate(turnout_high = NA, turnout_low=NA, time_of_day=current_time) %>%
select(ward, time_of_day, turnout, turnout_high, turnout_low) %>%
mutate_at(
vars(turnout, turnout_high, turnout_low),
funs(round)
),
type = "html",
title = "Estimated Turnout by Ward",
summary = FALSE,
rownames = FALSE
)
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/phila_example/")
source("config.R")
source("../util.R")
# source("download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../download_google_sheet.R", chdir=TRUE)
params <- safe_load("outputs/params.Rda")
raw_data <- load_data(TRUE, config, params)
bs <- fit_bootstrap(
raw_data,
params,
election_config=config,
n_boot=10,
use_inverse=FALSE,
verbose=FALSE
)
save_with_backup(bs, stem="bootstrap", dir="outputs")
rmarkdown::render(
"../election_tracker.Rmd",
knit_root_dir = getwd(),
output_dir = "outputs",
output_file = "election_tracker.html"
)
str(bs)
head(bs$single_result$full_predictions)
head(bs$single_result$precinct_df)
fit_bootstrap <- function(
raw_data,
params,
election_config,
n_boot=40,
use_inverse=FALSE,
verbose=TRUE
){
bootstrap_results <- vector(mode = "list", length = n_boot)
ranef_results <- vector(mode = "list", length = n_boot)
diagnostic <- FALSE
print("Raw Result")
single_fit <- fit_em_model(
raw_data, params, verbose=FALSE, use_inverse=use_inverse, election_config=election_config
)
single_result <- process_results(
single_fit$precinct_re_fit,
single_fit$loess_fit,
raw_data,
single_fit$resid,
params,
election_config=election_config,
plots = FALSE,
save_results = FALSE,
verbose=FALSE
)
if(verbose){
print(paste(
"Raw Result:",
exp(tail(single_result$time_df$log_fit, n=1)) *
sum(exp(single_result$precinct_df$re_fit))
))
}
for(i in 1:n_boot){
bs_data <- raw_data %>% sample_frac(replace = TRUE)
bs_params <- fit_em_model(
bs_data, params, verbose=FALSE,use_inverse=use_inverse,election_config=election_config
)
bs_results <- process_results(
bs_params$precinct_re_fit,
bs_params$loess_fit,
bs_data,
bs_params$resid,
params=params,
election_config=election_config,
plots = FALSE,
save_results = FALSE,
verbose=FALSE
)
bootstrap_results[[i]] <- bs_results$time_df %>%
mutate(
sim = i,
sum_exp_re = sum(exp(bs_results$precinct_df$re_fit))
)
ranef_results[[i]] <- bs_results$precinct_df %>%
select(precinct, re_fit) %>% mutate(sim=i)
if(verbose){
print(paste(
i,
exp(tail(bs_results$time_df$log_fit, n=1)) *
sum(exp(bs_results$precinct_df$re_fit))
))
}
}
ranef_df <- bind_rows(ranef_results)
bootstrap_df <- bind_rows(bootstrap_results) %>%
mutate(turnout = exp(log_fit) * sum_exp_re)
max_time_of_day <- max(bootstrap_df$time_of_day)
## extend sims
bootstrap_df <- bootstrap_df %>%
full_join(
bootstrap_df %>%
group_by(sim) %>%
mutate(min_time = min(time_of_day)) %>%
filter(time_of_day == max(time_of_day)) %>%
select(sim, turnout, time_of_day, min_time) %>%
rename(max_turnout = turnout, max_time = time_of_day) %>%
right_join(
expand.grid(
time_of_day = unique(bootstrap_df$time_of_day),
sim = unique(bootstrap_df$sim)
)
)
) %>%
mutate(
turnout = ifelse(is.na(turnout) & (time_of_day > max_time), max_turnout, turnout),
turnout = ifelse(is.na(turnout) & (time_of_day < min_time), 0, turnout)
) %>%
select(-max_turnout)
bootstrap_topline <- bootstrap_df %>% group_by(sim) %>% filter(time_of_day == max(time_of_day))
bootstrap_ci <- bootstrap_df %>%
group_by(time_of_day) %>%
summarise(
turnout_025 = quantile(turnout, 0.025, names = FALSE),
turnout_500 = quantile(turnout, 0.5, names = FALSE),
turnout_975 = quantile(turnout, 0.975, names = FALSE)
)
bs_ci <- quantile(bootstrap_topline$turnout, c(0.025, 0.500, 0.975))
print(paste(c("BS Turnout:", round(bs_ci)), collapse = " "))
return(
list(
single_result=single_result,
bootstrap_df=bootstrap_df,
bootstrap_topline=bootstrap_topline,
bootstrap_ci=bootstrap_ci,
ranef_df=ranef_df
)
)
}
bs$bootstrap_topline
head(bs$single_result$precinct_df)
rmarkdown::render(
"../election_tracker.Rmd",
knit_root_dir = getwd(),
output_dir = "outputs",
output_file = "election_tracker.html"
)
rmarkdown::render(
"../election_tracker.Rmd",
knit_root_dir = getwd(),
output_dir = "outputs",
output_file = "election_tracker.html"
)
rm(list = ls())
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/phila_example/")
source("config.R")
source("../util.R")
# source("download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../download_google_sheet.R", chdir=TRUE)
library(rmarkdown)
params <- safe_load("outputs/params.Rda")
raw_data <- load_data(TRUE, config, params)$raw_data
bs <- fit_bootstrap(
raw_data,
params,
election_config=config,
n_boot=100,
use_inverse=FALSE,
verbose=FALSE
)
raw_data
params
head(raw_data)
bootstrap_results <- vector(mode = "list", length = n_boot)
n_boot <- 40
election_config <- config
bootstrap_results <- vector(mode = "list", length = n_boot)
ranef_results <- vector(mode = "list", length = n_boot)
diagnostic <- FALSE
print("Raw Result")
single_fit <- fit_em_model(
raw_data, params, verbose=FALSE, use_inverse=use_inverse, election_config=election_config
)
use_inverse <- FALSE
single_fit <- fit_em_model(
raw_data, params, verbose=FALSE, use_inverse=use_inverse, election_config=election_config
)
## TODO: should this use mgcv::gam?
validate_config(election_config)
config <- extend_config(election_config)
n_obs <- nrow(raw_data)
loess_params <- get_loess_params(n_obs)
loess_degree <- loess_params$loess_degree
loess_span <- loess_params$loess_span
n_precincts <- nrow(params@precinct_fe)
## Precomp values
x_list <- tabulate_x(
raw_data$precinct_num,
rep(0, n_obs),
n_precincts
)
x_list
if(verbose) print("Precomputing Matrix")
if(use_inverse){
precomp_mat <- precomp_re_first_mat_inv(x_list, params, sigma_noise)
}else{
precomp_mat <- precomp_re_first_mat(x_list, params, sigma_noise)
}
sigma_noise <- 0.1
if(use_inverse){
precomp_mat <- precomp_re_first_mat_inv(x_list, params, sigma_noise)
}else{
precomp_mat <- precomp_re_first_mat(x_list, params, sigma_noise)
}
first_mat_stored <- precomp_mat[[1]]
first_mat_is_inv <- precomp_mat[[2]]
if(verbose) print("Sampling")
## initialize
precinct_re_fit <- rep(0, n_precincts)
log_pattern_fit <- rep(0, config$n_minutes)
loess_predicted <- 0
loess_predicted_final <- 0
resid <- calc_resid(
raw_data$log_obs,
raw_data$precinct_num,
precinct_re_fit,
loess_predicted
)
continue <- TRUE
loop_no <- 0
while(continue){
if(verbose) print(paste("Iter ", loop_no))
loop_no <- loop_no + 1
x_list <- tabulate_x(
raw_data$precinct_num,
resid + precinct_re_fit[raw_data$precinct_num],
n_precincts
)
precinct_re_fit <- optimize_precinct_re(
mu=params@precinct_fe$precinct_fe,
sigma_inv=params@precinct_cov_inv,
n_obs = x_list$n_obs_p,
x_sum = x_list$x_sum_p,
sigma_noise=sigma_noise,
first_mat=first_mat_stored,
first_mat_is_inv=first_mat_is_inv
)
old_resid <- resid
resid <- calc_resid(
raw_data$log_obs,
raw_data$precinct_num,
precinct_re_fit,
loess_predicted
)
if(verbose){
print(paste0("Sum Sq Resid: ", sum(resid^2)))
print(paste0("Change: ", sum(old_resid^2)- sum(resid^2)))
}
loess_fit <- loess(
x ~ minute,
data.frame(
x=resid + loess_predicted,
minute=raw_data$minute
),
span = loess_span,
degree = loess_degree
)
loess_predicted <- predict(loess_fit)
old_predicted_final <- loess_predicted_final
loess_predicted_final <- predict(
loess_fit,
newdata=data.frame(minute=max(raw_data$minute))
)
old_resid <- resid
resid <- calc_resid(
raw_data$log_obs,
raw_data$precinct_num,
precinct_re_fit,
loess_predicted
)
if(verbose){
print(paste0("Sum Sq Resid: ", sum(resid^2)))
print(paste0("Change: ", sum(old_resid^2)- sum(resid^2)))
print(paste0("Final Turnout: ", loess_predicted_final))
print(paste0("Change: ", abs(loess_predicted_final - old_predicted_final)))
}
# continue <- abs(sum(resid^2) - sum(old_resid^2)) > (tol * sum(old_resid^2))
continue <- abs(loess_predicted_final - old_predicted_final) > (tol * old_predicted_final)
}
verbose <- TRUE
while(continue){
if(verbose) print(paste("Iter ", loop_no))
loop_no <- loop_no + 1
x_list <- tabulate_x(
raw_data$precinct_num,
resid + precinct_re_fit[raw_data$precinct_num],
n_precincts
)
precinct_re_fit <- optimize_precinct_re(
mu=params@precinct_fe$precinct_fe,
sigma_inv=params@precinct_cov_inv,
n_obs = x_list$n_obs_p,
x_sum = x_list$x_sum_p,
sigma_noise=sigma_noise,
first_mat=first_mat_stored,
first_mat_is_inv=first_mat_is_inv
)
old_resid <- resid
resid <- calc_resid(
raw_data$log_obs,
raw_data$precinct_num,
precinct_re_fit,
loess_predicted
)
if(verbose){
print(paste0("Sum Sq Resid: ", sum(resid^2)))
print(paste0("Change: ", sum(old_resid^2)- sum(resid^2)))
}
loess_fit <- loess(
x ~ minute,
data.frame(
x=resid + loess_predicted,
minute=raw_data$minute
),
span = loess_span,
degree = loess_degree
)
loess_predicted <- predict(loess_fit)
old_predicted_final <- loess_predicted_final
loess_predicted_final <- predict(
loess_fit,
newdata=data.frame(minute=max(raw_data$minute))
)
old_resid <- resid
resid <- calc_resid(
raw_data$log_obs,
raw_data$precinct_num,
precinct_re_fit,
loess_predicted
)
if(verbose){
print(paste0("Sum Sq Resid: ", sum(resid^2)))
print(paste0("Change: ", sum(old_resid^2)- sum(resid^2)))
print(paste0("Final Turnout: ", loess_predicted_final))
print(paste0("Change: ", abs(loess_predicted_final - old_predicted_final)))
}
# continue <- abs(sum(resid^2) - sum(old_resid^2)) > (tol * sum(old_resid^2))
continue <- abs(loess_predicted_final - old_predicted_final) > (tol * old_predicted_final)
}
x_list <- tabulate_x(
raw_data$precinct_num,
resid + precinct_re_fit[raw_data$precinct_num],
n_precincts
)
x_list
head(raw_data)
tail(raw_data)
resid
## Precomp values
x_list <- tabulate_x(
raw_data$precinct_num,
rep(0, n_obs),
n_precincts
)
x_list
## initialize
precinct_re_fit <- rep(0, n_precincts)
log_pattern_fit <- rep(0, config$n_minutes)
loess_predicted <- 0
loess_predicted_final <- 0
resid <- calc_resid(
raw_data$log_obs,
raw_data$precinct_num,
precinct_re_fit,
loess_predicted
)
resid
resid[132]
raw_data[132,]
raw_data$precinct
params@precinct_fe$precinct
which(is.na(resid))
raw_data[132,]
params@precinct_fe$precinct
which(params@precinct_fe$precinct == "4926")
dim(params@precinct_fe)
params@precinct_fe %>% mutate(ward = substr(precinct, 1, 2))
params@precinct_fe %>% mutate(ward = substr(precinct, 1, 2)) %>% filter(ward == 49)
params@precinct_fe %>% mutate(ward = substr(precinct, 1, 2)) %>% filter(ward == 49) %>% arrange(desc(precinct))
getwd()
dir.exists("image")
dir.exists("images")
chi <- st_read("../chicago_2019/data/Precincts (current).dbf")
head(chi)
table(chi$ward)
rm(list=  ls())
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/phila_example/")
source("config.R")
source("../util.R")
# source("download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../download_google_sheet.R", chdir=TRUE)
library(rmarkdown)
params <- safe_load("outputs/params.Rda")
raw_data <- safe_load("outputs/raw_data.Rda")
bs <- safe_load("outputs/bootstrap.Rda")
source("../generate_plots.R")
source("../generate_plots.R", chdir = TRUE)
turnout_plot(bs, raw_data, config)
params <- safe_load("outputs/params.Rda")
run_iter <- 0
raw_data <- download_google_sheet(config)
raw_data <- load_data(TRUE, config, params)$raw_data
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/chicago_2019/")
source("config.R")
source("../util.R")
# source("download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../download_google_sheet.R", chdir=TRUE)
library(rmarkdown)
source("../prep_shapefiles.R", chdir = TRUE)
prep_shapefile(
config$precinct_shp_path,
config$get_precinct_id,
config$get_ward_from_precinct
)
## Precompute the historic parameters
source("../calc_params.R", chdir=TRUE)
