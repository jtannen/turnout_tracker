)
file.copy(
paste0("outputs/", filename),
paste0("C:/Users/Jonathan Tannen/Dropbox/github_page/jtannen.github.io/", filename),
overwrite=TRUE
)
system("../upload_git.bat")
}
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
if(use_real_data) raw_data <- download_google_sheet(config)
data_load <- load_data(use_real_data, config, params)
raw_data <- data_load$raw_data
save_with_backup(raw_data, stem="raw_data", dir="outputs")
if(!use_real_data) print(data_load$fake_data$true_turnout)
bs <- fit_bootstrap(
raw_data,
params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=FALSE
)
rm(list = ls())
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/chicago_2019/")
is_test <- FALSE
use_real_data <- TRUE
source("config.R")
source("../util.R")
source("../download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../generate_plots.R", chdir=TRUE)
library(rmarkdown)
params <- safe_load("outputs/params.Rda")
if(
!exists("use_real_data") |
!exists("is_test")
) stop("must specify values first!")
run_iter <- 0
while(TRUE){
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
if(use_real_data) raw_data <- download_google_sheet(config)
data_load <- load_data(use_real_data, config, params)
raw_data <- data_load$raw_data
save_with_backup(raw_data, stem="raw_data", dir="outputs")
if(!use_real_data) print(data_load$fake_data$true_turnout)
bs <- fit_bootstrap(
raw_data,
params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=FALSE
)
save_with_backup(bs, stem="bootstrap", dir="outputs")
if(is_test){
filename <- sprintf("turnout_tracker_%s_test.html", config$city_filename)
} else{
filename <- sprintf("turnout_tracker_%s.html", config$city_filename)
}
rmarkdown::render(
"../election_tracker.Rmd",
knit_root_dir = getwd(),
output_dir = "outputs",
output_file = filename
)
file.copy(
paste0("outputs/", filename),
paste0("C:/Users/Jonathan Tannen/Dropbox/github_page/jtannen.github.io/", filename),
overwrite=TRUE
)
system("../upload_git.bat")
}
if(use_real_data) raw_data <- download_google_sheet(config)
download_google_sheet <- function(config, filestem="google_download", dir="outputs"){
raw_url <- config$google_doc
url <- construct_download_url(raw_url, format = "csv")
raw_data <- gsheet2tbl(url)
write.csv(raw_data, file=paste0(dir,"/google_download.csv"), row.names = FALSE)
names(raw_data) <- c("timestamp", "ward", "div", "time_of_day", "obs")
raw_data$time <- ymd(config$election_ds, tz=config$timezone) + hms(raw_data$time_of_day)
raw_data <- raw_data %>%
filter(
time <= mdy_hms(timestamp, tz=config$timezone)
)
raw_data <- raw_data %>%
filter(
mdy_hms(timestamp, tz=config$timezone) <= (
ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
)
)
raw_data <- raw_data %>%
mutate(row_number = 1:n()) %>%
mutate(
ward = sprintf("%02d", ward),
div = sprintf("%02d", div),
precinct=paste0(ward,div)
) %>%
select(timestamp, row_number, ward, div, precinct, time, obs)
save_with_backup(raw_data, stem=filestem, dir=dir)
return(raw_data)
}
if(use_real_data) raw_data <- download_google_sheet(config)
raw_url <- config$google_doc
url <- construct_download_url(raw_url, format = "csv")
raw_data <- gsheet2tbl(url)
raw_data
write.csv(raw_data, file=paste0(dir,"/google_download.csv"), row.names = FALSE)
dir = "outputs"
write.csv(raw_data, file=paste0(dir,"/google_download.csv"), row.names = FALSE)
names(raw_data) <- c("timestamp", "ward", "div", "time_of_day", "obs")
raw_data$time <- ymd(config$election_ds, tz=config$timezone) + hms(raw_data$time_of_day)
raw_data <- raw_data %>%
filter(
time <= mdy_hms(timestamp, tz=config$timezone)
)
raw_data <- raw_data %>%
filter(
mdy_hms(timestamp, tz=config$timezone) <= (
ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
)
)
raw_data <- raw_data %>%
mutate(row_number = 1:n()) %>%
mutate(
ward = sprintf("%02d", ward),
div = sprintf("%02d", div),
precinct=paste0(ward,div)
) %>%
select(timestamp, row_number, ward, div, precinct, time, obs)
save_with_backup(raw_data, stem=filestem, dir=dir)
rm(list = ls())
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/chicago_2019/")
is_test <- FALSE
use_real_data <- TRUE
source("config.R")
source("../util.R")
source("../download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../generate_plots.R", chdir=TRUE)
library(rmarkdown)
params <- safe_load("outputs/params.Rda")
if(
!exists("use_real_data") |
!exists("is_test")
) stop("must specify values first!")
run_iter <- 0
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
if(use_real_data) raw_data <- download_google_sheet(config)
download_google_sheet <- function(config, filestem="google_download", dir="outputs"){
raw_url <- config$google_doc
url <- construct_download_url(raw_url, format = "csv")
raw_data <- gsheet2tbl(url)
write.csv(raw_data, file=paste0(dir,"/google_download.csv"), row.names = FALSE)
names(raw_data) <- c("timestamp", "ward", "div", "time_of_day", "obs")
raw_data$time <- ymd(config$election_ds, tz=config$timezone) + hms(raw_data$time_of_day)
raw_data <- raw_data %>%
filter(
time <= mdy_hms(timestamp, tz=config$timezone)
)
raw_data <- raw_data %>%
filter(
mdy_hms(timestamp, tz=config$timezone) <= (
ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
)
)
raw_data <- raw_data %>%
mutate(row_number = 1:n()) %>%
mutate(
ward = sprintf("%02d", ward),
div = sprintf("%02d", div),
precinct=paste0(ward,div)
) %>%
select(timestamp, row_number, ward, div, precinct, time, obs)
save_with_backup(raw_data, stem=filestem, dir=dir)
return(raw_data)
}
if(use_real_data) raw_data <- download_google_sheet(config)
download_google_sheet <- function(config, filestem="google_download", save_dir="outputs"){
raw_url <- config$google_doc
url <- construct_download_url(raw_url, format = "csv")
raw_data <- gsheet2tbl(url)
write.csv(raw_data, file=paste0(save_dir,"/google_download.csv"), row.names = FALSE)
names(raw_data) <- c("timestamp", "ward", "div", "time_of_day", "obs")
raw_data$time <- ymd(config$election_ds, tz=config$timezone) + hms(raw_data$time_of_day)
raw_data <- raw_data %>%
filter(
time <= mdy_hms(timestamp, tz=config$timezone)
)
raw_data <- raw_data %>%
filter(
mdy_hms(timestamp, tz=config$timezone) <= (
ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
)
)
raw_data <- raw_data %>%
mutate(row_number = 1:n()) %>%
mutate(
ward = sprintf("%02d", ward),
div = sprintf("%02d", div),
precinct=paste0(ward,div)
) %>%
select(timestamp, row_number, ward, div, precinct, time, obs)
save_with_backup(raw_data, stem=filestem, dir=save_dir)
return(raw_data)
}
if(use_real_data) raw_data <- download_google_sheet(config)
config
filestem="google_download"
save_dir="outputs"
raw_url <- config$google_doc
url <- construct_download_url(raw_url, format = "csv")
raw_data <- gsheet2tbl(url)
write.csv(raw_data, file=paste0(save_dir,"/google_download.csv"), row.names = FALSE)
names(raw_data) <- c("timestamp", "ward", "div", "time_of_day", "obs")
raw_data$time <- ymd(config$election_ds, tz=config$timezone) + hms(raw_data$time_of_day)
raw_data <- raw_data %>%
filter(
time <= mdy_hms(timestamp, tz=config$timezone)
)
raw_data <- raw_data %>%
filter(
mdy_hms(timestamp, tz=config$timezone) <= (
ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
)
)
raw_data <- raw_data %>%
mutate(row_number = 1:n()) %>%
mutate(
ward = sprintf("%02d", ward),
div = sprintf("%02d", div),
precinct=paste0(ward,div)
) %>%
select(timestamp, row_number, ward, div, precinct, time, obs)
save_with_backup(raw_data, stem=filestem, dir=save_dir)
return(raw_data)
download_google_sheet <- function(config, filestem="google_download", save_dir="outputs"){
raw_url <- config$google_doc
url <- construct_download_url(raw_url, format = "csv")
raw_data <- gsheet2tbl(url)
write.csv(raw_data, file=paste0(save_dir,"/google_download.csv"), row.names = FALSE)
names(raw_data) <- c("timestamp", "ward", "div", "time_of_day", "obs")
raw_data$time <- ymd(config$election_ds, tz=config$timezone) + hms(raw_data$time_of_day)
raw_data <- raw_data %>%
filter(
time <= mdy_hms(timestamp, tz=config$timezone)
)
raw_data <- raw_data %>%
filter(
mdy_hms(timestamp, tz=config$timezone) <= (
ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
)
)
raw_data <- raw_data %>%
mutate(row_number = 1:n()) %>%
mutate(
ward = sprintf("%02d", ward),
div = sprintf("%02d", div),
precinct=paste0(ward,div)
) %>%
select(timestamp, row_number, ward, div, precinct, time, obs)
save_with_backup(raw_data, stem=filestem, dir=save_dir)
return(raw_data)
}
if(use_real_data) raw_data <- download_google_sheet(config)
data_load <- load_data(use_real_data, config, params)
raw_data <- data_load$raw_data
save_with_backup(raw_data, stem="raw_data", dir="outputs")
if(!use_real_data) print(data_load$fake_data$true_turnout)
bs <- fit_bootstrap(
raw_data,
params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=FALSE
)
while(TRUE){
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
if(use_real_data) raw_data <- download_google_sheet(config)
data_load <- load_data(use_real_data, config, params)
raw_data <- data_load$raw_data
save_with_backup(raw_data, stem="raw_data", dir="outputs")
if(!use_real_data) print(data_load$fake_data$true_turnout)
bs <- fit_bootstrap(
raw_data,
params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=FALSE
)
save_with_backup(bs, stem="bootstrap", dir="outputs")
if(is_test){
filename <- sprintf("turnout_tracker_%s_test.html", config$city_filename)
} else{
filename <- sprintf("turnout_tracker_%s.html", config$city_filename)
}
rmarkdown::render(
"../election_tracker.Rmd",
knit_root_dir = getwd(),
output_dir = "outputs",
output_file = filename
)
file.copy(
paste0("outputs/", filename),
paste0("C:/Users/Jonathan Tannen/Dropbox/github_page/jtannen.github.io/", filename),
overwrite=TRUE
)
system("../upload_git.bat")
}
filter
load_google_data <- function(
election_config,
rda="outputs/google_download.Rda"
){
validate_config(election_config)
config <- extend_config(election_config)
raw_data <- safe_load(rda)
raw_data <- raw_data %>% filter(
!is.na(obs) &
!is.na(time) &
!is.na(precinct)
)
# filter obviously unreasonable submissions
raw_data <- raw_data %>% filter(obs > 0 & obs <= 900)
raw_data <- raw_data %>% filter(
(time >= config$base_time) &
(time <= (config$base_time + hours(config$end_hour - config$start_hour)))
)
return(raw_data)
}
bimodal_cdf <- function(n_minutes){
0.5 * (pnorm(1:n_minutes, 100, 50) + pnorm(1:n_minutes, 400, 50))
}
generate_fake_data <- function(
params,
election_config,
n_obs=500,
true_pattern=bimodal_cdf,
frac_of_day=0.6,
sigma_noise=0.05
){
validate_config(election_config)
config <- extend_config(election_config)
year_fe_samp <- sample(params@year_fe$year_fe, 1)
precinct_re_samp <- mvrnorm(
1,
params@precinct_fe$precinct_fe,
params@precinct_cov
)
n_precincts <- length(precinct_re_samp)
true_log_pattern <- log(true_pattern(config$n_minutes))
fake_data <- data.frame(
precinct_num = sample(n_precincts, size = n_obs, replace = TRUE),
minute = sample(
round(config$n_minutes * frac_of_day),
size = n_obs,
replace = TRUE
),
noise = rnorm(n_obs, sd=sigma_noise)
)
fake_data$obs <- with(
fake_data,
exp(
year_fe_samp +
precinct_re_samp[precinct_num] +
noise +
true_log_pattern[minute]
)
)
raw_data <- fake_data %>%
mutate(
row_number = 1:n(),
precinct = params@precinct_fe$precinct[precinct_num],
time = as.character(config$base_time + minutes(minute))
) %>%
dplyr::select(row_number, precinct, time, obs)
true_turnout <- sum(exp(year_fe_samp + precinct_re_samp))
return(
list(
raw_data=raw_data,
year_fe_samp=year_fe_samp,
precinct_re_samp=precinct_re_samp,
true_pattern=true_pattern,
true_turnout=true_turnout
)
)
}
load_data <- function(use_real_data, election_config, params, google_rda="outputs/google_download.Rda"){
validate_config(election_config)
if(use_real_data){
fake_data <- NULL
raw_data <- load_google_data(election_config, google_rda)
} else {
fake_data <- generate_fake_data(params, election_config)
raw_data <- fake_data$raw_data
}
raw_data$log_obs <- log(raw_data$obs)
raw_data$precinct_num <- match(
raw_data$precinct,
params@precinct_fe$precinct
)
raw_data <- raw_data %>% filter(!is.na(precinct_num))
config <- extend_config(election_config)
dtime <- ymd_hms(raw_data$time, tz=election_config$timezone) - config$base_time
units(dtime) <- "mins"
raw_data$minute <- as.numeric(dtime)
raw_data$minute[raw_data$minute == 0] <- 1
raw_data$time <- NULL
return(list(fake_data=fake_data, raw_data=raw_data))
}
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/election_day_tracker/tracker_v0/chicago_2019/")
is_test <- FALSE
use_real_data <- TRUE
while(TRUE){
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
if(use_real_data) raw_data <- download_google_sheet(config)
data_load <- load_data(use_real_data, config, params)
raw_data <- data_load$raw_data
save_with_backup(raw_data, stem="raw_data", dir="outputs")
if(!use_real_data) print(data_load$fake_data$true_turnout)
bs <- fit_bootstrap(
raw_data,
params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=FALSE
)
save_with_backup(bs, stem="bootstrap", dir="outputs")
if(is_test){
filename <- sprintf("turnout_tracker_%s_test.html", config$city_filename)
} else{
filename <- sprintf("turnout_tracker_%s.html", config$city_filename)
}
rmarkdown::render(
"../election_tracker.Rmd",
knit_root_dir = getwd(),
output_dir = "outputs",
output_file = filename
)
file.copy(
paste0("outputs/", filename),
paste0("C:/Users/Jonathan Tannen/Dropbox/github_page/jtannen.github.io/", filename),
overwrite=TRUE
)
system("../upload_git.bat")
}
warnings()
while(TRUE){
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
print("download_google_sheet")
if(use_real_data) raw_data <- download_google_sheet(config)
print("load_data")
data_load <- load_data(use_real_data, config, params)
raw_data <- data_load$raw_data
print("save_with_backup")
save_with_backup(raw_data, stem="raw_data", dir="outputs")
if(!use_real_data) print(data_load$fake_data$true_turnout)
print("fit_bootstrap")
bs <- fit_bootstrap(
raw_data,
params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=FALSE
)
save_with_backup(bs, stem="bootstrap", dir="outputs")
if(is_test){
filename <- sprintf("turnout_tracker_%s_test.html", config$city_filename)
} else{
filename <- sprintf("turnout_tracker_%s.html", config$city_filename)
}
print("rmarkdown")
rmarkdown::render(
"../election_tracker.Rmd",
knit_root_dir = getwd(),
output_dir = "outputs",
output_file = filename
)
print("copy and git")
file.copy(
paste0("outputs/", filename),
paste0("C:/Users/Jonathan Tannen/Dropbox/github_page/jtannen.github.io/", filename),
overwrite=TRUE
)
system("../upload_git.bat")
}
use_real_data
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
print("download_google_sheet")
if(use_real_data) raw_data <- download_google_sheet(config)
print("load_data")
data_load <- load_data(use_real_data, config, params)
raw_data <- data_load$raw_data
