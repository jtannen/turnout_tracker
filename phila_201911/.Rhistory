account="myaccountname",
server="shinyapps.io"
)
library(rsconnect)
deployApp(
appName = "wardportal",
upload=TRUE,
appFileManifest="manifest.txt",
account="myaccountname",
server="shinyapps.io"
)
deployApp(
appName = "wardportal",
upload=TRUE,
account="myaccountname",
server="shinyapps.io"
)
runApp('C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/ward_portal/shinyApp')
?deployApp
deployApp(
appDir = "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/ward_portal/shinyApp",
appName = "wardportal",
upload=TRUE,
account="jtannen",
server="shinyapps.io",
appId=1043534
)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
library(rsconnect)
deployApp(
appDir = "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/ward_portal/shinyApp",
appName = "wardportal",
upload=TRUE,
account="jtannen",
server="shinyapps.io",
appId=1043534
)
install.packages("nlme")
options(repos = c(CRAN = "https://cran.rstudio.com/"))
library(rsconnect)
deployApp(
appDir = "C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/ward_portal/shinyApp",
appName = "wardportal",
upload=TRUE,
account="jtannen",
server="shinyapps.io",
appId=1043534
)
install.packages("nlme")
install.packages("installr"); library(installr) # install+load installr
updateR()
bimodal_cdf <- function(n_minutes){
0.5 * (pnorm(1:n_minutes, 100, 50) + pnorm(1:n_minutes, 400, 50))
}
generate_fake_data <- function(
params,
election_config,
n_obs=500,
true_pattern=bimodal_cdf,
frac_of_day=0.6,
sigma_noise=0.05
){
validate_config(election_config)
config <- extend_config(election_config)
election_fe_samp <- sample(params@election_fe$election_fe, 1)
precinct_re_samp <- mvrnorm(
1,
params@precinct_fe$precinct_fe,
params@precinct_cov
)
n_precincts <- length(precinct_re_samp)
true_log_pattern <- log(true_pattern(config$n_minutes))
fake_data <- data.frame(
precinct_num = sample(n_precincts, size = n_obs, replace = TRUE),
minute = sample(
round(config$n_minutes * frac_of_day),
size = n_obs,
replace = TRUE
),
noise = rnorm(n_obs, sd=sigma_noise)
)
fake_data$obs <- with(
fake_data,
exp(
election_fe_samp +
precinct_re_samp[precinct_num] +
noise +
true_log_pattern[minute]
) %>% round()
)
raw_data <- fake_data %>%
mutate(
row_number = 1:n(),
precinct = params@precinct_fe$precinct[precinct_num],
time = as.character(config$base_time + minutes(minute))
) %>%
dplyr::select(row_number, precinct, time, obs)
## valid final turnout since the pattern ends at 1
true_turnout <- sum(exp(election_fe_samp + precinct_re_samp))
return(
list(
raw_data=raw_data,
election_fe_samp=election_fe_samp,
precinct_re_samp=precinct_re_samp,
true_pattern=true_pattern,
true_turnout=true_turnout
)
)
}
## SET THE WORKING DIRECTORY FIRST
## TO THE ELECTION-SPECIFIC FOLDER
# setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/phila_201911/")
source("config.R")
source("../util_tracker.R", chdir=TRUE)
source("../download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../generate_plots.R", chdir=TRUE)
source("../tweets.R", chdir=TRUE)
setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/phila_201911/")
source("config.R")
source("../util_tracker.R", chdir=TRUE)
source("../download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../generate_plots.R", chdir=TRUE)
source("../tweets.R", chdir=TRUE)
library(rmarkdown)
library(tidyverse)
params <- readRDS("outputs/params.Rds")
USE_REAL_DATA <- FALSE
IS_TEST <- TRUE
if(
!exists("USE_REAL_DATA") |
!exists("IS_TEST")
) stop("must specify values first!")
SHOULD_TWEET <- TRUE
reply_tweet_id <- NA
time_of_last_tweet <- NA
print_sim_turnout <- function(data_load, config){
config <- extend_config(config)
true_turnout_eod <- data_load$fake_data$true_turnout
curr_minutes <- time_length(
ymd_hms(max(data_load$fake_data$raw_data$time)) -
ymd_hms(config$base_time),
"minutes"
)
frac <- data_load$fake_data$true_pattern(config$n_minutes)[curr_minutes]
print("True Turnout")
print(data_load$fake_data$true_turnout * frac)
}
run_iter <- 0
load_data <- function(use_real_data, election_config, params, google_rds="outputs/google_download.Rds"){
validate_config(election_config)
if(use_real_data){
fake_data <- NULL
raw_data <- load_google_data(election_config, google_rds)
} else {
fake_data <- generate_fake_data(params, election_config)
raw_data <- fake_data$raw_data
}
raw_data$obs[raw_data$obs == 0] <- 1
raw_data$log_obs <- log(raw_data$obs)
raw_data$precinct_num <- match(
raw_data$precinct,
params@precinct_fe$precinct
)
raw_data <- raw_data %>% filter(!is.na(precinct_num))
config <- extend_config(election_config)
dtime <- ymd_hms(raw_data$time, tz=election_config$timezone) - config$base_time
units(dtime) <- "mins"
raw_data$minute <- as.numeric(dtime)
raw_data$minute[raw_data$minute == 0] <- 1
raw_data$time <- NULL
if(!use_real_data){
true_turnout_eod <- fake_data$true_turnout
curr_minutes <- time_length(
ymd_hms(max(fake_data$raw_data$time)) -
ymd_hms(election_config$base_time),
"minutes"
)
frac <- fake_data$true_pattern(election_config$n_minutes)[curr_minutes]
print("True Turnout")
print(fake_data$true_turnout * frac)
}
return(list(fake_data=fake_data, raw_data=raw_data))
}
run_iter <- 0
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
print("download_google_sheet")
if(USE_REAL_DATA) download_google_sheet(config)
print("load_data")
data_load <- load_data(USE_REAL_DATA, config, params)
rm(list=ls())
## SET THE WORKING DIRECTORY FIRST
## TO THE ELECTION-SPECIFIC FOLDER
# setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/phila_201911/")
source("config.R")
source("../util_tracker.R", chdir=TRUE)
source("../download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../generate_plots.R", chdir=TRUE)
source("../tweets.R", chdir=TRUE)
library(rmarkdown)
library(tidyverse)
params <- readRDS("outputs/params.Rds")
USE_REAL_DATA <- FALSE
IS_TEST <- TRUE
if(
!exists("USE_REAL_DATA") |
!exists("IS_TEST")
) stop("must specify values first!")
SHOULD_TWEET <- TRUE
reply_tweet_id <- NA
time_of_last_tweet <- NA
run_iter <- 0
while(TRUE){
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
print("download_google_sheet")
if(USE_REAL_DATA) download_google_sheet(config)
print("load_data")
data_load <- load_data(USE_REAL_DATA, config, params)
raw_data <- data_load$raw_data
print("save_with_backup")
saveRDS(raw_data, file=paste0("outputs/raw_data.Rds"))
write.csv(raw_data, file=sprintf("outputs/raw_data_%s.csv", config$city_filename), row.names=FALSE)
if(!USE_REAL_DATA){
print_sim_turnout(data_load, config)
}
print("fit bootstrap")
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=FALSE
)
save_with_backup(bs, stem="bootstrap", dir="outputs")
if(IS_TEST){
filename <- "turnout_tracker_%s_test.html"
} else {
filename <- "turnout_tracker_%s.html"
}
print("rmarkdown")
rmarkdown::render(
"../election_tracker.Rmd",
knit_root_dir = getwd(),
output_dir = "outputs",
output_file = sprintf(filename, config$city_filename)
)
print("copy and git")
for(f0 in c(filename, "precinct_turnout_%s.csv", "raw_data_%s.csv")){
f <- sprintf(f0, config$city_filename)
file.copy(
paste0("outputs/", f),
paste0("C:/Users/Jonathan Tannen/Dropbox/github_page/jtannen.github.io/", f),
overwrite=TRUE
)
}
system("../upload_git.bat")
if(SHOULD_TWEET){
is_time_to_tweet <- is.na(time_of_last_tweet) | (
(ymd_hms(current_time) - ymd_hms(time_of_last_tweet)) >= hours(1)
)
if(is_time_to_tweet){
reply_tweet_id <- tweet_update(
reply_tweet_id,
turnout_ci,
current_time,
config,
c(turnout_plot_file, relative_map_file)
)
time_of_last_tweet <- current_time
}
}
}
run_iter <- 0
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
print("download_google_sheet")
if(USE_REAL_DATA) download_google_sheet(config)
print("load_data")
data_load <- load_data(USE_REAL_DATA, config, params)
raw_data <- data_load$raw_data
## SET THE WORKING DIRECTORY FIRST
## TO THE ELECTION-SPECIFIC FOLDER
# setwd("C:/Users/Jonathan Tannen/Dropbox/sixty_six/posts/turnout_tracker/tracker_v0/phila_201911/")
source("config.R")
source("../util_tracker.R", chdir=TRUE)
source("../download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../generate_plots.R", chdir=TRUE)
source("../tweets.R", chdir=TRUE)
library(rmarkdown)
library(tidyverse)
params <- readRDS("outputs/params.Rds")
if(
!exists("USE_REAL_DATA") |
!exists("IS_TEST")
) stop("must specify values first!")
SHOULD_TWEET <- TRUE
reply_tweet_id <- NA
time_of_last_tweet <- NA
run_iter <- 0
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
print("download_google_sheet")
if(USE_REAL_DATA) download_google_sheet(config)
print("load_data")
data_load <- load_data(USE_REAL_DATA, config, params)
data_load <- load_data(USE_REAL_DATA, config, params)
raw_data <- data_load$raw_data
print("save_with_backup")
saveRDS(raw_data, file=paste0("outputs/raw_data.Rds"))
write.csv(raw_data, file=sprintf("outputs/raw_data_%s.csv", config$city_filename), row.names=FALSE)
USE_GOOGLE_DATA <- TRUE
rm(list=ls())
source("config.R")
source("../util_tracker.R", chdir=TRUE)
source("../download_google_sheet.R", chdir = TRUE)
source("../fit_submissions.R", chdir = TRUE)
source("../bootstrap.R", chdir = TRUE)
source("../generate_plots.R", chdir=TRUE)
source("../tweets.R", chdir=TRUE)
library(rmarkdown)
library(tidyverse)
params <- readRDS("outputs/params.Rds")
USE_GOOGLE_DATA <- TRUE
IS_TEST <- TRUE
#
if(
!exists("USE_GOOGLE_DATA") |
!exists("IS_TEST")
) stop("must specify values first!")
SHOULD_TWEET <- TRUE
reply_tweet_id <- NA
time_of_last_tweet <- NA
run_iter <- 0
run_iter <- run_iter + 1
print(paste("Run", run_iter))
print(Sys.time())
if(USE_GOOGLE_DATA){
print("download_google_sheet")
download_google_sheet(config, test_data=IS_TEST)
}
config
raw_url <- config$google_doc
raw_url
url <- construct_download_url(raw_url, format = "csv")
url
raw_data <- gsheet2tbl(url)
raw_data
url
raw_url <- config$test_data
url <- construct_download_url(raw_url, format = "csv")
raw_data <- gsheet2tbl(url)
write.csv(raw_data, file=paste0(save_dir,"/google_download.csv"), row.names = FALSE)
raw_data
download_google_sheet <- function(
config,
filestem="google_download",
save_dir="outputs",
test_data=FALSE
){
if(test_data){
raw_url <- config$test_data
} else {
raw_url <- config$google_doc
}
url <- construct_download_url(raw_url, format = "csv")
raw_data <- gsheet2tbl(url)
write.csv(raw_data, file=paste0(save_dir,"/google_download.csv"), row.names = FALSE)
names(raw_data) <- c("timestamp", "ward", "div", "time_of_day", "obs")
raw_data$time <- ymd(config$election_ds, tz=config$timezone) + hms(raw_data$time_of_day)
raw_data <- raw_data %>%
filter(
time <= mdy_hms(timestamp, tz=config$timezone) + minutes(5)
)
# raw_data <- raw_data %>%
#   filter(
#     mdy_hms(time_of_day, tz=config$timezone) <= (
#       ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
#     )
#   )
raw_data <- raw_data %>%
mutate(row_number = 1:n()) %>%
mutate(
ward = sprintf("%02d", asnum(ward)),
div = sprintf("%02d", asnum(div)),
precinct=paste0(ward,div)
) %>%
select(timestamp, row_number, ward, div, precinct, time, obs)
saveRDS(raw_data, file = paste0(save_dir, "/", filestem,".Rds"))
return(raw_data)
}
download_google_sheet(config, test_data=IS_TEST)
download_google_sheet <- function(
config,
filestem="google_download",
save_dir="outputs",
test_data=FALSE
){
if(test_data){
raw_url <- config$test_data
} else {
raw_url <- config$google_doc
}
url <- construct_download_url(raw_url, format = "csv")
print(url)
raw_data <- gsheet2tbl(url)
print(raw_data)
write.csv(raw_data, file=paste0(save_dir,"/google_download.csv"), row.names = FALSE)
names(raw_data) <- c("timestamp", "ward", "div", "time_of_day", "obs")
raw_data$time <- ymd(config$election_ds, tz=config$timezone) + hms(raw_data$time_of_day)
raw_data <- raw_data %>%
filter(
time <= mdy_hms(timestamp, tz=config$timezone) + minutes(5)
)
# raw_data <- raw_data %>%
#   filter(
#     mdy_hms(time_of_day, tz=config$timezone) <= (
#       ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
#     )
#   )
raw_data <- raw_data %>%
mutate(row_number = 1:n()) %>%
mutate(
ward = sprintf("%02d", asnum(ward)),
div = sprintf("%02d", asnum(div)),
precinct=paste0(ward,div)
) %>%
select(timestamp, row_number, ward, div, precinct, time, obs)
saveRDS(raw_data, file = paste0(save_dir, "/", filestem,".Rds"))
return(raw_data)
}
download_google_sheet(config, test_data=IS_TEST)
download_google_sheet <- function(
config,
filestem="google_download",
save_dir="outputs",
test_data=FALSE
){
if(test_data){
raw_url <- config$test_data
} else {
raw_url <- config$google_doc
}
url <- construct_download_url(raw_url, format = "csv")
raw_data <- gsheet2tbl(url)
write.csv(raw_data, file=paste0(save_dir,"/google_download.csv"), row.names = FALSE)
names(raw_data) <- c("timestamp", "ward", "div", "time_of_day", "obs")
raw_data$time <- ymd(config$election_ds, tz=config$timezone) + hms(raw_data$time_of_day)
raw_data <- raw_data %>%
filter(
time <= mdy_hms(timestamp, tz=config$timezone) + minutes(5)
)
# raw_data <- raw_data %>%
#   filter(
#     mdy_hms(time_of_day, tz=config$timezone) <= (
#       ymd(config$election_ds, tz=config$timezone) + hours(config$end_hour)
#     )
#   )
raw_data <- raw_data %>%
mutate(row_number = 1:n()) %>%
mutate(
ward = sprintf("%02d", asnum(ward)),
div = sprintf("%02d", asnum(div)),
precinct=paste0(ward,div)
) %>%
select(timestamp, row_number, ward, div, precinct, time, obs)
saveRDS(raw_data, file = paste0(save_dir, "/", filestem,".Rds"))
return(raw_data)
}
download_google_sheet(config, test_data=IS_TEST)
print("load_data")
data_load <- load_data(USE_GOOGLE_DATA, config, params)
raw_data <- data_load$raw_data
raw_data
saveRDS(raw_data, file=paste0("outputs/raw_data.Rds"))
write.csv(raw_data, file=sprintf("outputs/raw_data_%s.csv", config$city_filename), row.names=FALSE)
write.csv(raw_data, file=sprintf("outputs/raw_data_%s.csv", config$city_filename), row.names=FALSE)
print("fit bootstrap")
bs <- fit_and_bootstrap(
raw_data=raw_data,
params=params,
election_config=config,
n_boot=40,
use_inverse=FALSE,
verbose=FALSE
)
save_with_backup(bs, stem="bootstrap", dir="outputs")
if(IS_TEST){
filename <- "turnout_tracker_%s_test.html"
} else {
filename <- "turnout_tracker_%s.html"
}
print("rmarkdown")
rmarkdown::render(
"../election_tracker.Rmd",
knit_root_dir = getwd(),
output_dir = "outputs",
output_file = sprintf(filename, config$city_filename)
)
